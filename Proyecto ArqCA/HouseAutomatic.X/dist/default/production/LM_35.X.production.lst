

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Dec 10 10:23:22 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    25  0000                     
    26                           ; Version 2.20
    27                           ; Generated 12/02/2020 GMT
    28                           ; 
    29                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	idataCOMRAM
    62  000B26                     __pidataCOMRAM:
    63                           	callstack 0
    64                           
    65                           ;initializer for _character1
    66  000B26  01                 	db	1
    67  000B27  00                 	db	0
    68  000B28  1F                 	db	31
    69  000B29  04                 	db	4
    70  000B2A  04                 	db	4
    71  000B2B  04                 	db	4
    72  000B2C  04                 	db	4
    73  000B2D  04                 	db	4
    74  0000                     _LATB	set	3978
    75  0000                     _TRISB	set	3987
    76  0000                     _TRISD	set	3989
    77  0000                     _OSCCON	set	4051
    78  0000                     _ADCON0bits	set	4034
    79  0000                     _ADRESL	set	4035
    80  0000                     _ADRESH	set	4036
    81  0000                     _ADCON2	set	4032
    82  0000                     _ADCON1	set	4033
    83  0000                     _ADCON0	set	4034
    84  0000                     _TRISA	set	3986
    85  0000                     _LATD1	set	31841
    86  0000                     _LATD0	set	31840
    87  0000                     _GO_nDONE	set	32273
    88  0000                     _LATD2	set	31842
    89  0000                     _TRISA1	set	31889
    90  0000                     _TRISD2	set	31914
    91  0000                     _GO	set	32273
    92  0000                     _ADON	set	32272
    93                           
    94                           	psect	smallconst
    95  000800                     __psmallconst:
    96                           	callstack 0
    97  000800  00                 	db	0
    98  000801                     STR_3:
    99  000801  48                 	db	72	;'H'
   100  000802  69                 	db	105	;'i'
   101  000803  67                 	db	103	;'g'
   102  000804  74                 	db	116	;'t'
   103  000805  68                 	db	104	;'h'
   104  000806  00                 	db	0
   105  000807                     STR_1:
   106  000807  4C                 	db	76	;'L'
   107  000808  3A                 	db	58	;':'
   108  000809  20                 	db	32
   109  00080A  00                 	db	0
   110  00080B                     STR_2:
   111  00080B  4C                 	db	76	;'L'
   112  00080C  6F                 	db	111	;'o'
   113  00080D  77                 	db	119	;'w'
   114  00080E  00                 	db	0
   115  00080F  00                 	db	0	; dummy byte at the end
   116  0000                     
   117                           ; #config settings
   118                           
   119                           	psect	cinit
   120  000A90                     __pcinit:
   121                           	callstack 0
   122  000A90                     start_initialization:
   123                           	callstack 0
   124  000A90                     __initialization:
   125                           	callstack 0
   126                           
   127                           ; Initialize objects allocated to COMRAM (8 bytes)
   128                           ; load TBLPTR registers with __pidataCOMRAM
   129  000A90  0E26               	movlw	low __pidataCOMRAM
   130  000A92  6EF6               	movwf	tblptrl,c
   131  000A94  0E0B               	movlw	high __pidataCOMRAM
   132  000A96  6EF7               	movwf	tblptrh,c
   133  000A98  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   134  000A9A  6EF8               	movwf	tblptru,c
   135  000A9C  EE00  F010         	lfsr	0,__pdataCOMRAM
   136  000AA0  EE10 F008          	lfsr	1,8
   137  000AA4                     copy_data0:
   138  000AA4  0009               	tblrd		*+
   139  000AA6  CFF5 FFEE          	movff	tablat,postinc0
   140  000AAA  50E5               	movf	postdec1,w,c
   141  000AAC  50E1               	movf	fsr1l,w,c
   142  000AAE  E1FA               	bnz	copy_data0
   143  000AB0                     end_of_initialization:
   144                           	callstack 0
   145  000AB0                     __end_of__initialization:
   146                           	callstack 0
   147  000AB0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   148  000AB2  6EF8               	movwf	tblptru,c
   149  000AB4  0E08               	movlw	high __Lsmallconst
   150  000AB6  6EF7               	movwf	tblptrh,c
   151  000AB8  0100               	movlb	0
   152  000ABA  EF89  F005         	goto	_main	;jump to C main() function
   153                           
   154                           	psect	dataCOMRAM
   155  000010                     __pdataCOMRAM:
   156                           	callstack 0
   157  000010                     _character1:
   158                           	callstack 0
   159  000010                     	ds	8
   160                           
   161                           	psect	cstackCOMRAM
   162  000001                     __pcstackCOMRAM:
   163                           	callstack 0
   164  000001                     ?___lwdiv:
   165                           	callstack 0
   166  000001                     MSdelay@val:
   167                           	callstack 0
   168  000001                     ___lwdiv@dividend:
   169                           	callstack 0
   170                           
   171                           ; 2 bytes @ 0x0
   172  000001                     	ds	2
   173  000003                     MSdelay@i:
   174                           	callstack 0
   175  000003                     ___lwdiv@divisor:
   176                           	callstack 0
   177                           
   178                           ; 2 bytes @ 0x2
   179  000003                     	ds	2
   180  000005                     MSdelay@j:
   181                           	callstack 0
   182  000005                     ___lwdiv@quotient:
   183                           	callstack 0
   184                           
   185                           ; 2 bytes @ 0x4
   186  000005                     	ds	2
   187  000007                     LCD_Command@cmd:
   188                           	callstack 0
   189  000007                     LCD_Char@char_data:
   190                           	callstack 0
   191  000007                     ___lwdiv@counter:
   192                           	callstack 0
   193                           
   194                           ; 1 bytes @ 0x6
   195  000007                     	ds	1
   196  000008                     ?_adc:
   197                           	callstack 0
   198  000008                     LCD_String@msg:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x7
   202  000008                     	ds	2
   203  00000A                     ??_adc:
   204  00000A                     LCD_String_xy@pos:
   205                           	callstack 0
   206                           
   207                           ; 1 bytes @ 0x9
   208  00000A                     	ds	1
   209  00000B                     LCD_String_xy@str:
   210                           	callstack 0
   211                           
   212                           ; 2 bytes @ 0xA
   213  00000B                     	ds	1
   214  00000C                     adc@adcval:
   215                           	callstack 0
   216                           
   217                           ; 2 bytes @ 0xB
   218  00000C                     	ds	1
   219  00000D                     LCD_String_xy@row:
   220                           	callstack 0
   221                           
   222                           ; 1 bytes @ 0xC
   223  00000D                     	ds	1
   224  00000E                     SensorLuz@val:
   225                           	callstack 0
   226                           
   227                           ; 2 bytes @ 0xD
   228  00000E                     	ds	2
   229  000010                     
   230                           ; 1 bytes @ 0xF
   231 ;;
   232 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   233 ;;
   234 ;; *************** function _main *****************
   235 ;; Defined at:
   236 ;;		line 18 in file "Temperature_Display.c"
   237 ;; Parameters:    Size  Location     Type
   238 ;;		None
   239 ;; Auto vars:     Size  Location     Type
   240 ;;  Temperature    10    0        unsigned char [10]
   241 ;;  celsius         4    0        float 
   242 ;;  i               1    0        unsigned char 
   243 ;; Return value:  Size  Location     Type
   244 ;;                  1    wreg      void 
   245 ;; Registers used:
   246 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   247 ;; Tracked objects:
   248 ;;		On entry : 0/0
   249 ;;		On exit  : 0/0
   250 ;;		Unchanged: 0/0
   251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   252 ;;      Params:         0       0       0       0       0       0       0       0       0
   253 ;;      Locals:         0       0       0       0       0       0       0       0       0
   254 ;;      Temps:          0       0       0       0       0       0       0       0       0
   255 ;;      Totals:         0       0       0       0       0       0       0       0       0
   256 ;;Total ram usage:        0 bytes
   257 ;; Hardware stack levels required when called:    5
   258 ;; This function calls:
   259 ;;		_ADC_Init
   260 ;;		_LCD_Init
   261 ;;		_SensorLuz
   262 ;; This function is called by:
   263 ;;		Startup code after reset
   264 ;; This function uses a non-reentrant model
   265 ;;
   266                           
   267                           	psect	text0
   268  000B12                     __ptext0:
   269                           	callstack 0
   270  000B12                     _main:
   271                           	callstack 26
   272  000B12                     
   273                           ;Temperature_Display.c: 19:     char i;;Temperature_Display.c: 20:     char Temperature[
      +                          10];;Temperature_Display.c: 21:     float celsius;;Temperature_Display.c: 22:     OSCCON
      +                           = 0x72;
   274  000B12  0E72               	movlw	114
   275  000B14  6ED3               	movwf	211,c	;volatile
   276  000B16                     
   277                           ;Temperature_Display.c: 23:     LCD_Init();
   278  000B16  EC0D  F005         	call	_LCD_Init	;wreg free
   279  000B1A                     
   280                           ;Temperature_Display.c: 24:     ADC_Init();
   281  000B1A  EC7D  F005         	call	_ADC_Init	;wreg free
   282  000B1E                     
   283                           ;Temperature_Display.c: 44:     SensorLuz();
   284  000B1E  EC89  F004         	call	_SensorLuz	;wreg free
   285  000B22  EF00  F000         	goto	start
   286  000B26                     __end_of_main:
   287                           	callstack 0
   288                           
   289 ;; *************** function _SensorLuz *****************
   290 ;; Defined at:
   291 ;;		line 48 in file "Temperature_Display.c"
   292 ;; Parameters:    Size  Location     Type
   293 ;;		None
   294 ;; Auto vars:     Size  Location     Type
   295 ;;  val             2   13[COMRAM] unsigned int 
   296 ;; Return value:  Size  Location     Type
   297 ;;                  1    wreg      void 
   298 ;; Registers used:
   299 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   300 ;; Tracked objects:
   301 ;;		On entry : 0/0
   302 ;;		On exit  : 0/0
   303 ;;		Unchanged: 0/0
   304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   305 ;;      Params:         0       0       0       0       0       0       0       0       0
   306 ;;      Locals:         2       0       0       0       0       0       0       0       0
   307 ;;      Temps:          0       0       0       0       0       0       0       0       0
   308 ;;      Totals:         2       0       0       0       0       0       0       0       0
   309 ;;Total ram usage:        2 bytes
   310 ;; Hardware stack levels used:    1
   311 ;; Hardware stack levels required when called:    4
   312 ;; This function calls:
   313 ;;		_LCD_Command
   314 ;;		_LCD_String_xy
   315 ;;		_adc
   316 ;; This function is called by:
   317 ;;		_main
   318 ;; This function uses a non-reentrant model
   319 ;;
   320                           
   321                           	psect	text1
   322  000912                     __ptext1:
   323                           	callstack 0
   324  000912                     _SensorLuz:
   325                           	callstack 26
   326  000912                     
   327                           ;Temperature_Display.c: 49:     unsigned int val;;Temperature_Display.c: 50:     TRISD2 
      +                          = 0;
   328  000912  9495               	bcf	3989,2,c	;volatile
   329                           
   330                           ;Temperature_Display.c: 51:     TRISA1 = 1;
   331  000914  8292               	bsf	3986,1,c	;volatile
   332  000916                     l1100:
   333                           
   334                           ;Temperature_Display.c: 53:         LCD_Command(0x40);
   335  000916  0E40               	movlw	64
   336  000918  EC6E  F005         	call	_LCD_Command
   337                           
   338                           ;Temperature_Display.c: 54:         val = adc();
   339  00091C  ECC1  F004         	call	_adc	;wreg free
   340  000920  C008  F00E         	movff	?_adc,SensorLuz@val
   341  000924  C009  F00F         	movff	?_adc+1,SensorLuz@val+1
   342  000928                     
   343                           ;Temperature_Display.c: 55:         LCD_String_xy(1,0,"L: ");
   344  000928  0E00               	movlw	0
   345  00092A  6E0A               	movwf	LCD_String_xy@pos^0,c
   346  00092C  0E07               	movlw	low STR_1
   347  00092E  6E0B               	movwf	LCD_String_xy@str^0,c
   348  000930  0E08               	movlw	high STR_1
   349  000932  6E0C               	movwf	(LCD_String_xy@str+1)^0,c
   350  000934  0E01               	movlw	1
   351  000936  EC08  F004         	call	_LCD_String_xy
   352  00093A                     
   353                           ;Temperature_Display.c: 56:         if(val>150){
   354  00093A  500F               	movf	(SensorLuz@val+1)^0,w,c
   355  00093C  E109               	bnz	u330
   356  00093E  0E97               	movlw	151
   357  000940  5C0E               	subwf	SensorLuz@val^0,w,c
   358  000942  A0D8               	btfss	status,0,c
   359  000944  EFA6  F004         	goto	u331
   360  000948  EFA8  F004         	goto	u330
   361  00094C                     u331:
   362  00094C  EFB4  F004         	goto	l1110
   363  000950                     u330:
   364  000950                     
   365                           ;Temperature_Display.c: 57:            LCD_String_xy(2,2,"Low");
   366  000950  0E02               	movlw	2
   367  000952  6E0A               	movwf	LCD_String_xy@pos^0,c
   368  000954  0E0B               	movlw	low STR_2
   369  000956  6E0B               	movwf	LCD_String_xy@str^0,c
   370  000958  0E08               	movlw	high STR_2
   371  00095A  6E0C               	movwf	(LCD_String_xy@str+1)^0,c
   372  00095C  0E02               	movlw	2
   373  00095E  EC08  F004         	call	_LCD_String_xy
   374  000962                     
   375                           ;Temperature_Display.c: 58:            LATD2 = 1;
   376  000962  848C               	bsf	3980,2,c	;volatile
   377                           
   378                           ;Temperature_Display.c: 59:         }else{
   379  000964  EF8B  F004         	goto	l1100
   380  000968                     l1110:
   381                           
   382                           ;Temperature_Display.c: 60:             LCD_String_xy(2,2,"Higth");
   383  000968  0E02               	movlw	2
   384  00096A  6E0A               	movwf	LCD_String_xy@pos^0,c
   385  00096C  0E01               	movlw	low STR_3
   386  00096E  6E0B               	movwf	LCD_String_xy@str^0,c
   387  000970  0E08               	movlw	high STR_3
   388  000972  6E0C               	movwf	(LCD_String_xy@str+1)^0,c
   389  000974  0E02               	movlw	2
   390  000976  EC08  F004         	call	_LCD_String_xy
   391  00097A                     
   392                           ;Temperature_Display.c: 61:             LATD2 = 0;
   393  00097A  948C               	bcf	3980,2,c	;volatile
   394  00097C  EF8B  F004         	goto	l1100
   395  000980  0012               	return		;funcret
   396  000982                     __end_of_SensorLuz:
   397                           	callstack 0
   398                           
   399 ;; *************** function _adc *****************
   400 ;; Defined at:
   401 ;;		line 66 in file "Temperature_Display.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;		None
   404 ;; Auto vars:     Size  Location     Type
   405 ;;  adcval          2   11[COMRAM] unsigned int 
   406 ;; Return value:  Size  Location     Type
   407 ;;                  2    7[COMRAM] unsigned int 
   408 ;; Registers used:
   409 ;;		wreg, status,2, status,0, cstack
   410 ;; Tracked objects:
   411 ;;		On entry : 0/0
   412 ;;		On exit  : 0/0
   413 ;;		Unchanged: 0/0
   414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   415 ;;      Params:         2       0       0       0       0       0       0       0       0
   416 ;;      Locals:         2       0       0       0       0       0       0       0       0
   417 ;;      Temps:          2       0       0       0       0       0       0       0       0
   418 ;;      Totals:         6       0       0       0       0       0       0       0       0
   419 ;;Total ram usage:        6 bytes
   420 ;; Hardware stack levels used:    1
   421 ;; Hardware stack levels required when called:    1
   422 ;; This function calls:
   423 ;;		___lwdiv
   424 ;; This function is called by:
   425 ;;		_SensorLuz
   426 ;; This function uses a non-reentrant model
   427 ;;
   428                           
   429                           	psect	text2
   430  000982                     __ptext2:
   431                           	callstack 0
   432  000982                     _adc:
   433                           	callstack 28
   434  000982                     l71:
   435  000982  B2C2               	btfsc	4034,1,c	;volatile
   436  000984  EFC6  F004         	goto	u281
   437  000988  EFC8  F004         	goto	u280
   438  00098C                     u281:
   439  00098C  EFC1  F004         	goto	l71
   440  000990                     u280:
   441  000990                     
   442                           ;Temperature_Display.c: 69:     adcval = ((ADRESH << 8) | (ADRESL));
   443  000990  50C3               	movf	195,w,c	;volatile
   444  000992  CFC4 F00A          	movff	4036,??_adc	;volatile
   445  000996  6A0B               	clrf	(??_adc+1)^0,c
   446  000998  C00A  F00B         	movff	??_adc,??_adc+1
   447  00099C  6A0A               	clrf	??_adc^0,c
   448  00099E  100A               	iorwf	??_adc^0,w,c
   449  0009A0  6E0C               	movwf	adc@adcval^0,c
   450  0009A2  500B               	movf	(??_adc+1)^0,w,c
   451  0009A4  6E0D               	movwf	(adc@adcval+1)^0,c
   452  0009A6                     
   453                           ;Temperature_Display.c: 70:     adcval = (adcval / 3) - 1;
   454  0009A6  C00C  F001         	movff	adc@adcval,___lwdiv@dividend
   455  0009AA  C00D  F002         	movff	adc@adcval+1,___lwdiv@dividend+1
   456  0009AE  0E00               	movlw	0
   457  0009B0  6E04               	movwf	(___lwdiv@divisor+1)^0,c
   458  0009B2  0E03               	movlw	3
   459  0009B4  6E03               	movwf	___lwdiv@divisor^0,c
   460  0009B6  EC4F  F004         	call	___lwdiv	;wreg free
   461  0009BA  0EFF               	movlw	255
   462  0009BC  2401               	addwf	?___lwdiv^0,w,c
   463  0009BE  6E0C               	movwf	adc@adcval^0,c
   464  0009C0  0EFF               	movlw	255
   465  0009C2  2002               	addwfc	(?___lwdiv+1)^0,w,c
   466  0009C4  6E0D               	movwf	(adc@adcval+1)^0,c
   467  0009C6                     
   468                           ;Temperature_Display.c: 72:     return adcval;
   469  0009C6  C00C  F008         	movff	adc@adcval,?_adc
   470  0009CA  C00D  F009         	movff	adc@adcval+1,?_adc+1
   471  0009CE  0012               	return		;funcret
   472  0009D0                     __end_of_adc:
   473                           	callstack 0
   474                           
   475 ;; *************** function ___lwdiv *****************
   476 ;; Defined at:
   477 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c99\common\lwdiv.c"
   478 ;; Parameters:    Size  Location     Type
   479 ;;  dividend        2    0[COMRAM] unsigned int 
   480 ;;  divisor         2    2[COMRAM] unsigned int 
   481 ;; Auto vars:     Size  Location     Type
   482 ;;  quotient        2    4[COMRAM] unsigned int 
   483 ;;  counter         1    6[COMRAM] unsigned char 
   484 ;; Return value:  Size  Location     Type
   485 ;;                  2    0[COMRAM] unsigned int 
   486 ;; Registers used:
   487 ;;		wreg, status,2, status,0
   488 ;; Tracked objects:
   489 ;;		On entry : 0/0
   490 ;;		On exit  : 0/0
   491 ;;		Unchanged: 0/0
   492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   493 ;;      Params:         4       0       0       0       0       0       0       0       0
   494 ;;      Locals:         3       0       0       0       0       0       0       0       0
   495 ;;      Temps:          0       0       0       0       0       0       0       0       0
   496 ;;      Totals:         7       0       0       0       0       0       0       0       0
   497 ;;Total ram usage:        7 bytes
   498 ;; Hardware stack levels used:    1
   499 ;; This function calls:
   500 ;;		Nothing
   501 ;; This function is called by:
   502 ;;		_adc
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           	psect	text3
   507  00089E                     __ptext3:
   508                           	callstack 0
   509  00089E                     ___lwdiv:
   510                           	callstack 28
   511  00089E  0E00               	movlw	0
   512  0008A0  6E06               	movwf	(___lwdiv@quotient+1)^0,c
   513  0008A2  0E00               	movlw	0
   514  0008A4  6E05               	movwf	___lwdiv@quotient^0,c
   515  0008A6  5003               	movf	___lwdiv@divisor^0,w,c
   516  0008A8  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
   517  0008AA  B4D8               	btfsc	status,2,c
   518  0008AC  EF5A  F004         	goto	u251
   519  0008B0  EF5C  F004         	goto	u250
   520  0008B4                     u251:
   521  0008B4  EF84  F004         	goto	l628
   522  0008B8                     u250:
   523  0008B8  0E01               	movlw	1
   524  0008BA  6E07               	movwf	___lwdiv@counter^0,c
   525  0008BC  EF64  F004         	goto	l1040
   526  0008C0                     l1038:
   527  0008C0  90D8               	bcf	status,0,c
   528  0008C2  3603               	rlcf	___lwdiv@divisor^0,f,c
   529  0008C4  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
   530  0008C6  2A07               	incf	___lwdiv@counter^0,f,c
   531  0008C8                     l1040:
   532  0008C8  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
   533  0008CA  EF69  F004         	goto	u261
   534  0008CE  EF6B  F004         	goto	u260
   535  0008D2                     u261:
   536  0008D2  EF60  F004         	goto	l1038
   537  0008D6                     u260:
   538  0008D6                     l1042:
   539  0008D6  90D8               	bcf	status,0,c
   540  0008D8  3605               	rlcf	___lwdiv@quotient^0,f,c
   541  0008DA  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
   542  0008DC  5003               	movf	___lwdiv@divisor^0,w,c
   543  0008DE  5C01               	subwf	___lwdiv@dividend^0,w,c
   544  0008E0  5004               	movf	(___lwdiv@divisor+1)^0,w,c
   545  0008E2  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
   546  0008E4  A0D8               	btfss	status,0,c
   547  0008E6  EF77  F004         	goto	u271
   548  0008EA  EF79  F004         	goto	u270
   549  0008EE                     u271:
   550  0008EE  EF7E  F004         	goto	l1050
   551  0008F2                     u270:
   552  0008F2  5003               	movf	___lwdiv@divisor^0,w,c
   553  0008F4  5E01               	subwf	___lwdiv@dividend^0,f,c
   554  0008F6  5004               	movf	(___lwdiv@divisor+1)^0,w,c
   555  0008F8  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
   556  0008FA  8005               	bsf	___lwdiv@quotient^0,0,c
   557  0008FC                     l1050:
   558  0008FC  90D8               	bcf	status,0,c
   559  0008FE  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
   560  000900  3203               	rrcf	___lwdiv@divisor^0,f,c
   561  000902  2E07               	decfsz	___lwdiv@counter^0,f,c
   562  000904  EF6B  F004         	goto	l1042
   563  000908                     l628:
   564  000908  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
   565  00090C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
   566  000910  0012               	return		;funcret
   567  000912                     __end_of___lwdiv:
   568                           	callstack 0
   569                           
   570 ;; *************** function _LCD_String_xy *****************
   571 ;; Defined at:
   572 ;;		line 64 in file "LCD_20x4.c"
   573 ;; Parameters:    Size  Location     Type
   574 ;;  row             1    wreg     unsigned char 
   575 ;;  pos             1    9[COMRAM] unsigned char 
   576 ;;  str             2   10[COMRAM] PTR const unsigned char 
   577 ;;		 -> STR_3(6), STR_2(4), STR_1(4), 
   578 ;; Auto vars:     Size  Location     Type
   579 ;;  row             1   12[COMRAM] unsigned char 
   580 ;; Return value:  Size  Location     Type
   581 ;;                  1    wreg      void 
   582 ;; Registers used:
   583 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   584 ;; Tracked objects:
   585 ;;		On entry : 0/0
   586 ;;		On exit  : 0/0
   587 ;;		Unchanged: 0/0
   588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   589 ;;      Params:         3       0       0       0       0       0       0       0       0
   590 ;;      Locals:         1       0       0       0       0       0       0       0       0
   591 ;;      Temps:          0       0       0       0       0       0       0       0       0
   592 ;;      Totals:         4       0       0       0       0       0       0       0       0
   593 ;;Total ram usage:        4 bytes
   594 ;; Hardware stack levels used:    1
   595 ;; Hardware stack levels required when called:    3
   596 ;; This function calls:
   597 ;;		_LCD_Command
   598 ;;		_LCD_String
   599 ;; This function is called by:
   600 ;;		_SensorLuz
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           	psect	text4
   605  000810                     __ptext4:
   606                           	callstack 0
   607  000810                     _LCD_String_xy:
   608                           	callstack 26
   609                           
   610                           ;incstack = 0
   611                           ;LCD_String_xy@row stored from wreg
   612  000810  6E0D               	movwf	LCD_String_xy@row^0,c
   613  000812                     
   614                           ;LCD_20x4.c: 64: void LCD_String_xy(char row,char pos,const char *str);LCD_20x4.c: 65: {
      +                          ;LCD_20x4.c: 66:     if (row == 1)
   615  000812  040D               	decf	LCD_String_xy@row^0,w,c
   616  000814  A4D8               	btfss	status,2,c
   617  000816  EF0F  F004         	goto	u291
   618  00081A  EF11  F004         	goto	u290
   619  00081E                     u291:
   620  00081E  EF18  F004         	goto	l1068
   621  000822                     u290:
   622  000822                     
   623                           ;LCD_20x4.c: 67:   LCD_Command((pos & 0x0F)|0x80);
   624  000822  500A               	movf	LCD_String_xy@pos^0,w,c
   625  000824  0B0F               	andlw	15
   626  000826  0980               	iorlw	128
   627  000828  EC6E  F005         	call	_LCD_Command
   628  00082C  EF48  F004         	goto	l1080
   629  000830                     l1068:
   630  000830  0E02               	movlw	2
   631  000832  180D               	xorwf	LCD_String_xy@row^0,w,c
   632  000834  A4D8               	btfss	status,2,c
   633  000836  EF1F  F004         	goto	u301
   634  00083A  EF21  F004         	goto	u300
   635  00083E                     u301:
   636  00083E  EF28  F004         	goto	l1072
   637  000842                     u300:
   638  000842                     
   639                           ;LCD_20x4.c: 69:   LCD_Command((pos & 0x0F)|0xC0);
   640  000842  500A               	movf	LCD_String_xy@pos^0,w,c
   641  000844  0B0F               	andlw	15
   642  000846  09C0               	iorlw	192
   643  000848  EC6E  F005         	call	_LCD_Command
   644  00084C  EF48  F004         	goto	l1080
   645  000850                     l1072:
   646  000850  0E03               	movlw	3
   647  000852  180D               	xorwf	LCD_String_xy@row^0,w,c
   648  000854  A4D8               	btfss	status,2,c
   649  000856  EF2F  F004         	goto	u311
   650  00085A  EF31  F004         	goto	u310
   651  00085E                     u311:
   652  00085E  EF38  F004         	goto	l1076
   653  000862                     u310:
   654  000862                     
   655                           ;LCD_20x4.c: 71:   LCD_Command((pos & 0x0F)|0x94);
   656  000862  500A               	movf	LCD_String_xy@pos^0,w,c
   657  000864  0B0F               	andlw	15
   658  000866  0994               	iorlw	148
   659  000868  EC6E  F005         	call	_LCD_Command
   660  00086C  EF48  F004         	goto	l1080
   661  000870                     l1076:
   662  000870  0E04               	movlw	4
   663  000872  180D               	xorwf	LCD_String_xy@row^0,w,c
   664  000874  A4D8               	btfss	status,2,c
   665  000876  EF3F  F004         	goto	u321
   666  00087A  EF41  F004         	goto	u320
   667  00087E                     u321:
   668  00087E  EF48  F004         	goto	l116
   669  000882                     u320:
   670  000882                     
   671                           ;LCD_20x4.c: 73:   LCD_Command((pos & 0x0F)|0xD4);
   672  000882  500A               	movf	LCD_String_xy@pos^0,w,c
   673  000884  0B0F               	andlw	15
   674  000886  09D4               	iorlw	212
   675  000888  EC6E  F005         	call	_LCD_Command
   676  00088C  EF48  F004         	goto	l1080
   677  000890                     l116:
   678  000890                     l1080:
   679                           
   680                           ;LCD_20x4.c: 74:  LCD_String(str);
   681  000890  C00B  F008         	movff	LCD_String_xy@str,LCD_String@msg
   682  000894  C00C  F009         	movff	LCD_String_xy@str+1,LCD_String@msg+1
   683  000898  EC2D  F005         	call	_LCD_String	;wreg free
   684  00089C  0012               	return		;funcret
   685  00089E                     __end_of_LCD_String_xy:
   686                           	callstack 0
   687                           
   688 ;; *************** function _LCD_String *****************
   689 ;; Defined at:
   690 ;;		line 54 in file "LCD_20x4.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  msg             2    7[COMRAM] PTR const unsigned char 
   693 ;;		 -> STR_3(6), STR_2(4), STR_1(4), 
   694 ;; Auto vars:     Size  Location     Type
   695 ;;		None
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   705 ;;      Params:         2       0       0       0       0       0       0       0       0
   706 ;;      Locals:         0       0       0       0       0       0       0       0       0
   707 ;;      Temps:          0       0       0       0       0       0       0       0       0
   708 ;;      Totals:         2       0       0       0       0       0       0       0       0
   709 ;;Total ram usage:        2 bytes
   710 ;; Hardware stack levels used:    1
   711 ;; Hardware stack levels required when called:    2
   712 ;; This function calls:
   713 ;;		_LCD_Char
   714 ;; This function is called by:
   715 ;;		_LCD_String_xy
   716 ;; This function uses a non-reentrant model
   717 ;;
   718                           
   719                           	psect	text5
   720  000A5A                     __ptext5:
   721                           	callstack 0
   722  000A5A                     _LCD_String:
   723                           	callstack 26
   724  000A5A                     
   725                           ;LCD_20x4.c: 54: void LCD_String(const char *msg);LCD_20x4.c: 55: {;LCD_20x4.c: 56:  whi
      +                          le((*msg)!=0)
   726  000A5A  EF39  F005         	goto	l1030
   727  000A5E                     l1026:
   728                           
   729                           ;LCD_20x4.c: 57:  {;LCD_20x4.c: 58:    LCD_Char(*msg);
   730  000A5E  C008  FFF6         	movff	LCD_String@msg,tblptrl
   731  000A62  C009  FFF7         	movff	LCD_String@msg+1,tblptrh
   732  000A66                     	if	0	;tblptru may be non-zero
   733  000A66                     	endif
   734  000A66                     	if	0	;tblptru may be non-zero
   735  000A66                     	endif
   736  000A66  0008               	tblrd		*
   737  000A68  50F5               	movf	tablat,w,c
   738  000A6A  EC5F  F005         	call	_LCD_Char
   739  000A6E                     
   740                           ;LCD_20x4.c: 59:    msg++;
   741  000A6E  4A08               	infsnz	LCD_String@msg^0,f,c
   742  000A70  2A09               	incf	(LCD_String@msg+1)^0,f,c
   743  000A72                     l1030:
   744                           
   745                           ;LCD_20x4.c: 56:  while((*msg)!=0)
   746  000A72  C008  FFF6         	movff	LCD_String@msg,tblptrl
   747  000A76  C009  FFF7         	movff	LCD_String@msg+1,tblptrh
   748  000A7A                     	if	0	;tblptru may be non-zero
   749  000A7A                     	endif
   750  000A7A                     	if	0	;tblptru may be non-zero
   751  000A7A                     	endif
   752  000A7A  0008               	tblrd		*
   753  000A7C  50F5               	movf	tablat,w,c
   754  000A7E  0900               	iorlw	0
   755  000A80  A4D8               	btfss	status,2,c
   756  000A82  EF45  F005         	goto	u241
   757  000A86  EF47  F005         	goto	u240
   758  000A8A                     u241:
   759  000A8A  EF2F  F005         	goto	l1026
   760  000A8E                     u240:
   761  000A8E  0012               	return		;funcret
   762  000A90                     __end_of_LCD_String:
   763                           	callstack 0
   764                           
   765 ;; *************** function _LCD_Char *****************
   766 ;; Defined at:
   767 ;;		line 42 in file "LCD_20x4.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;  char_data       1    wreg     unsigned char 
   770 ;; Auto vars:     Size  Location     Type
   771 ;;  char_data       1    6[COMRAM] unsigned char 
   772 ;; Return value:  Size  Location     Type
   773 ;;                  1    wreg      void 
   774 ;; Registers used:
   775 ;;		wreg, status,2, status,0, cstack
   776 ;; Tracked objects:
   777 ;;		On entry : 0/0
   778 ;;		On exit  : 0/0
   779 ;;		Unchanged: 0/0
   780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   781 ;;      Params:         0       0       0       0       0       0       0       0       0
   782 ;;      Locals:         1       0       0       0       0       0       0       0       0
   783 ;;      Temps:          0       0       0       0       0       0       0       0       0
   784 ;;      Totals:         1       0       0       0       0       0       0       0       0
   785 ;;Total ram usage:        1 bytes
   786 ;; Hardware stack levels used:    1
   787 ;; Hardware stack levels required when called:    1
   788 ;; This function calls:
   789 ;;		_MSdelay
   790 ;; This function is called by:
   791 ;;		_LCD_String
   792 ;;		_LCD_Custom_Char
   793 ;; This function uses a non-reentrant model
   794 ;;
   795                           
   796                           	psect	text6
   797  000ABE                     __ptext6:
   798                           	callstack 0
   799  000ABE                     _LCD_Char:
   800                           	callstack 26
   801                           
   802                           ;incstack = 0
   803                           ;LCD_Char@char_data stored from wreg
   804  000ABE  6E07               	movwf	LCD_Char@char_data^0,c
   805  000AC0                     
   806                           ;LCD_20x4.c: 42: void LCD_Char(char char_data);LCD_20x4.c: 43: {;LCD_20x4.c: 44:  LATB =
      +                           char_data;
   807  000AC0  C007  FF8A         	movff	LCD_Char@char_data,3978	;volatile
   808  000AC4                     
   809                           ;LCD_20x4.c: 45:  LATD0 = 1;
   810  000AC4  808C               	bsf	3980,0,c	;volatile
   811  000AC6                     
   812                           ;LCD_20x4.c: 46:  LATD2 = 0;
   813  000AC6  948C               	bcf	3980,2,c	;volatile
   814  000AC8                     
   815                           ;LCD_20x4.c: 47:     LATD1 = 1;
   816  000AC8  828C               	bsf	3980,1,c	;volatile
   817  000ACA                     
   818                           ;LCD_20x4.c: 48:  __nop();
   819  000ACA  F000               	nop	
   820  000ACC                     
   821                           ;LCD_20x4.c: 49:  LATD1 = 0;
   822  000ACC  928C               	bcf	3980,1,c	;volatile
   823  000ACE                     
   824                           ;LCD_20x4.c: 50:  MSdelay(3);
   825  000ACE  0E00               	movlw	0
   826  000AD0  6E02               	movwf	(MSdelay@val+1)^0,c
   827  000AD2  0E03               	movlw	3
   828  000AD4  6E01               	movwf	MSdelay@val^0,c
   829  000AD6  ECE8  F004         	call	_MSdelay	;wreg free
   830  000ADA  0012               	return		;funcret
   831  000ADC                     __end_of_LCD_Char:
   832                           	callstack 0
   833                           
   834 ;; *************** function _LCD_Init *****************
   835 ;; Defined at:
   836 ;;		line 9 in file "LCD_20x4.c"
   837 ;; Parameters:    Size  Location     Type
   838 ;;		None
   839 ;; Auto vars:     Size  Location     Type
   840 ;;		None
   841 ;; Return value:  Size  Location     Type
   842 ;;                  1    wreg      void 
   843 ;; Registers used:
   844 ;;		wreg, status,2, status,0, cstack
   845 ;; Tracked objects:
   846 ;;		On entry : 0/0
   847 ;;		On exit  : 0/0
   848 ;;		Unchanged: 0/0
   849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   850 ;;      Params:         0       0       0       0       0       0       0       0       0
   851 ;;      Locals:         0       0       0       0       0       0       0       0       0
   852 ;;      Temps:          0       0       0       0       0       0       0       0       0
   853 ;;      Totals:         0       0       0       0       0       0       0       0       0
   854 ;;Total ram usage:        0 bytes
   855 ;; Hardware stack levels used:    1
   856 ;; Hardware stack levels required when called:    2
   857 ;; This function calls:
   858 ;;		_LCD_Command
   859 ;;		_MSdelay
   860 ;; This function is called by:
   861 ;;		_main
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           	psect	text7
   866  000A1A                     __ptext7:
   867                           	callstack 0
   868  000A1A                     _LCD_Init:
   869                           	callstack 28
   870  000A1A                     
   871                           ;LCD_20x4.c: 11:     TRISD = 0;
   872  000A1A  0E00               	movlw	0
   873  000A1C  6E95               	movwf	149,c	;volatile
   874                           
   875                           ;LCD_20x4.c: 12:  TRISB = 0;
   876  000A1E  0E00               	movlw	0
   877  000A20  6E93               	movwf	147,c	;volatile
   878  000A22                     
   879                           ;LCD_20x4.c: 14:  MSdelay(20);
   880  000A22  0E00               	movlw	0
   881  000A24  6E02               	movwf	(MSdelay@val+1)^0,c
   882  000A26  0E14               	movlw	20
   883  000A28  6E01               	movwf	MSdelay@val^0,c
   884  000A2A  ECE8  F004         	call	_MSdelay	;wreg free
   885  000A2E                     
   886                           ;LCD_20x4.c: 15:  LCD_Command (0x38);
   887  000A2E  0E38               	movlw	56
   888  000A30  EC6E  F005         	call	_LCD_Command
   889  000A34                     
   890                           ;LCD_20x4.c: 16:  LCD_Command (0x0C);
   891  000A34  0E0C               	movlw	12
   892  000A36  EC6E  F005         	call	_LCD_Command
   893  000A3A                     
   894                           ;LCD_20x4.c: 17:  LCD_Command (0x06);
   895  000A3A  0E06               	movlw	6
   896  000A3C  EC6E  F005         	call	_LCD_Command
   897  000A40                     
   898                           ;LCD_20x4.c: 18:  LCD_Command (0x01);
   899  000A40  0E01               	movlw	1
   900  000A42  EC6E  F005         	call	_LCD_Command
   901  000A46                     
   902                           ;LCD_20x4.c: 19:  MSdelay(3);
   903  000A46  0E00               	movlw	0
   904  000A48  6E02               	movwf	(MSdelay@val+1)^0,c
   905  000A4A  0E03               	movlw	3
   906  000A4C  6E01               	movwf	MSdelay@val^0,c
   907  000A4E  ECE8  F004         	call	_MSdelay	;wreg free
   908  000A52                     
   909                           ;LCD_20x4.c: 20:  LCD_Command (0x80);
   910  000A52  0E80               	movlw	128
   911  000A54  EC6E  F005         	call	_LCD_Command
   912  000A58  0012               	return		;funcret
   913  000A5A                     __end_of_LCD_Init:
   914                           	callstack 0
   915                           
   916 ;; *************** function _LCD_Command *****************
   917 ;; Defined at:
   918 ;;		line 31 in file "LCD_20x4.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;  cmd             1    wreg     unsigned char 
   921 ;; Auto vars:     Size  Location     Type
   922 ;;  cmd             1    6[COMRAM] unsigned char 
   923 ;; Return value:  Size  Location     Type
   924 ;;                  1    wreg      void 
   925 ;; Registers used:
   926 ;;		wreg, status,2, status,0, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   932 ;;      Params:         0       0       0       0       0       0       0       0       0
   933 ;;      Locals:         1       0       0       0       0       0       0       0       0
   934 ;;      Temps:          0       0       0       0       0       0       0       0       0
   935 ;;      Totals:         1       0       0       0       0       0       0       0       0
   936 ;;Total ram usage:        1 bytes
   937 ;; Hardware stack levels used:    1
   938 ;; Hardware stack levels required when called:    1
   939 ;; This function calls:
   940 ;;		_MSdelay
   941 ;; This function is called by:
   942 ;;		_SensorLuz
   943 ;;		_LCD_Init
   944 ;;		_LCD_String_xy
   945 ;;		_LCD_Clear
   946 ;;		_LCD_Custom_Char
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           	psect	text8
   951  000ADC                     __ptext8:
   952                           	callstack 0
   953  000ADC                     _LCD_Command:
   954                           	callstack 27
   955                           
   956                           ;incstack = 0
   957                           ;LCD_Command@cmd stored from wreg
   958  000ADC  6E07               	movwf	LCD_Command@cmd^0,c
   959  000ADE                     
   960                           ;LCD_20x4.c: 31: void LCD_Command(char cmd );LCD_20x4.c: 32: {;LCD_20x4.c: 33:  LATB = c
      +                          md;
   961  000ADE  C007  FF8A         	movff	LCD_Command@cmd,3978	;volatile
   962  000AE2                     
   963                           ;LCD_20x4.c: 34:  LATD0 = 0;
   964  000AE2  908C               	bcf	3980,0,c	;volatile
   965  000AE4                     
   966                           ;LCD_20x4.c: 35:  LATD2 = 0;
   967  000AE4  948C               	bcf	3980,2,c	;volatile
   968  000AE6                     
   969                           ;LCD_20x4.c: 36:     LATD1 = 1;
   970  000AE6  828C               	bsf	3980,1,c	;volatile
   971  000AE8                     
   972                           ;LCD_20x4.c: 37:  __nop();
   973  000AE8  F000               	nop	
   974  000AEA                     
   975                           ;LCD_20x4.c: 38:  LATD1 = 0;
   976  000AEA  928C               	bcf	3980,1,c	;volatile
   977  000AEC                     
   978                           ;LCD_20x4.c: 39:  MSdelay(3);
   979  000AEC  0E00               	movlw	0
   980  000AEE  6E02               	movwf	(MSdelay@val+1)^0,c
   981  000AF0  0E03               	movlw	3
   982  000AF2  6E01               	movwf	MSdelay@val^0,c
   983  000AF4  ECE8  F004         	call	_MSdelay	;wreg free
   984  000AF8  0012               	return		;funcret
   985  000AFA                     __end_of_LCD_Command:
   986                           	callstack 0
   987                           
   988 ;; *************** function _MSdelay *****************
   989 ;; Defined at:
   990 ;;		line 90 in file "LCD_20x4.c"
   991 ;; Parameters:    Size  Location     Type
   992 ;;  val             2    0[COMRAM] unsigned int 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  j               2    4[COMRAM] unsigned int 
   995 ;;  i               2    2[COMRAM] unsigned int 
   996 ;; Return value:  Size  Location     Type
   997 ;;                  1    wreg      void 
   998 ;; Registers used:
   999 ;;		wreg, status,2, status,0
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/0
  1002 ;;		On exit  : 0/0
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1005 ;;      Params:         2       0       0       0       0       0       0       0       0
  1006 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1007 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1008 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1009 ;;Total ram usage:        6 bytes
  1010 ;; Hardware stack levels used:    1
  1011 ;; This function calls:
  1012 ;;		Nothing
  1013 ;; This function is called by:
  1014 ;;		_LCD_Init
  1015 ;;		_LCD_Command
  1016 ;;		_LCD_Char
  1017 ;;		_LCD_Clear
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           	psect	text9
  1022  0009D0                     __ptext9:
  1023                           	callstack 0
  1024  0009D0                     _MSdelay:
  1025                           	callstack 26
  1026  0009D0                     
  1027                           ;LCD_20x4.c: 90: void MSdelay(unsigned int val);LCD_20x4.c: 91: {;LCD_20x4.c: 92:      u
      +                          nsigned int i,j;;LCD_20x4.c: 93:         for(i=0;i<=val;i++)
  1028  0009D0  0E00               	movlw	0
  1029  0009D2  6E04               	movwf	(MSdelay@i+1)^0,c
  1030  0009D4  0E00               	movlw	0
  1031  0009D6  6E03               	movwf	MSdelay@i^0,c
  1032  0009D8  EF01  F005         	goto	l994
  1033  0009DC                     l982:
  1034                           
  1035                           ;LCD_20x4.c: 94:             for(j=0;j<165;j++);
  1036  0009DC  0E00               	movlw	0
  1037  0009DE  6E06               	movwf	(MSdelay@j+1)^0,c
  1038  0009E0  0E00               	movlw	0
  1039  0009E2  6E05               	movwf	MSdelay@j^0,c
  1040  0009E4                     l988:
  1041  0009E4  4A05               	infsnz	MSdelay@j^0,f,c
  1042  0009E6  2A06               	incf	(MSdelay@j+1)^0,f,c
  1043  0009E8  5006               	movf	(MSdelay@j+1)^0,w,c
  1044  0009EA  E109               	bnz	u220
  1045  0009EC  0EA5               	movlw	165
  1046  0009EE  5C05               	subwf	MSdelay@j^0,w,c
  1047  0009F0  A0D8               	btfss	status,0,c
  1048  0009F2  EFFD  F004         	goto	u221
  1049  0009F6  EFFF  F004         	goto	u220
  1050  0009FA                     u221:
  1051  0009FA  EFF2  F004         	goto	l988
  1052  0009FE                     u220:
  1053  0009FE  4A03               	infsnz	MSdelay@i^0,f,c
  1054  000A00  2A04               	incf	(MSdelay@i+1)^0,f,c
  1055  000A02                     l994:
  1056  000A02  5003               	movf	MSdelay@i^0,w,c
  1057  000A04  5C01               	subwf	MSdelay@val^0,w,c
  1058  000A06  5004               	movf	(MSdelay@i+1)^0,w,c
  1059  000A08  5802               	subwfb	(MSdelay@val+1)^0,w,c
  1060  000A0A  B0D8               	btfsc	status,0,c
  1061  000A0C  EF0A  F005         	goto	u231
  1062  000A10  EF0C  F005         	goto	u230
  1063  000A14                     u231:
  1064  000A14  EFEE  F004         	goto	l982
  1065  000A18                     u230:
  1066  000A18  0012               	return		;funcret
  1067  000A1A                     __end_of_MSdelay:
  1068                           	callstack 0
  1069                           
  1070 ;; *************** function _ADC_Init *****************
  1071 ;; Defined at:
  1072 ;;		line 10 in file "PIC18F4550_ADC_Source_File.c"
  1073 ;; Parameters:    Size  Location     Type
  1074 ;;		None
  1075 ;; Auto vars:     Size  Location     Type
  1076 ;;		None
  1077 ;; Return value:  Size  Location     Type
  1078 ;;                  1    wreg      void 
  1079 ;; Registers used:
  1080 ;;		wreg, status,2
  1081 ;; Tracked objects:
  1082 ;;		On entry : 0/0
  1083 ;;		On exit  : 0/0
  1084 ;;		Unchanged: 0/0
  1085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1086 ;;      Params:         0       0       0       0       0       0       0       0       0
  1087 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1088 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1089 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1090 ;;Total ram usage:        0 bytes
  1091 ;; Hardware stack levels used:    1
  1092 ;; This function calls:
  1093 ;;		Nothing
  1094 ;; This function is called by:
  1095 ;;		_main
  1096 ;; This function uses a non-reentrant model
  1097 ;;
  1098                           
  1099                           	psect	text10
  1100  000AFA                     __ptext10:
  1101                           	callstack 0
  1102  000AFA                     _ADC_Init:
  1103                           	callstack 30
  1104  000AFA                     
  1105                           ;PIC18F4550_ADC_Source_File.c: 12:     TRISA = 0xff;
  1106  000AFA  6892               	setf	146,c	;volatile
  1107  000AFC                     
  1108                           ;PIC18F4550_ADC_Source_File.c: 13:     ADCON0 = 0x85;
  1109  000AFC  0E85               	movlw	133
  1110  000AFE  6EC2               	movwf	194,c	;volatile
  1111                           
  1112                           ;PIC18F4550_ADC_Source_File.c: 14:     ADCON1 = 0xC0;
  1113  000B00  0EC0               	movlw	192
  1114  000B02  6EC1               	movwf	193,c	;volatile
  1115                           
  1116                           ;PIC18F4550_ADC_Source_File.c: 15:     ADCON2 = 0x92;
  1117  000B04  0E92               	movlw	146
  1118  000B06  6EC0               	movwf	192,c	;volatile
  1119                           
  1120                           ;PIC18F4550_ADC_Source_File.c: 16:     ADRESH=0;
  1121  000B08  0E00               	movlw	0
  1122  000B0A  6EC4               	movwf	196,c	;volatile
  1123                           
  1124                           ;PIC18F4550_ADC_Source_File.c: 17:     ADRESL=0;
  1125  000B0C  0E00               	movlw	0
  1126  000B0E  6EC3               	movwf	195,c	;volatile
  1127  000B10  0012               	return		;funcret
  1128  000B12                     __end_of_ADC_Init:
  1129                           	callstack 0
  1130                           
  1131                           	psect	rparam
  1132  0000                     
  1133                           	psect	idloc
  1134                           
  1135                           ;Config register IDLOC0 @ 0x200000
  1136                           ;	unspecified, using default values
  1137  200000                     	org	2097152
  1138  200000  FF                 	db	255
  1139                           
  1140                           ;Config register IDLOC1 @ 0x200001
  1141                           ;	unspecified, using default values
  1142  200001                     	org	2097153
  1143  200001  FF                 	db	255
  1144                           
  1145                           ;Config register IDLOC2 @ 0x200002
  1146                           ;	unspecified, using default values
  1147  200002                     	org	2097154
  1148  200002  FF                 	db	255
  1149                           
  1150                           ;Config register IDLOC3 @ 0x200003
  1151                           ;	unspecified, using default values
  1152  200003                     	org	2097155
  1153  200003  FF                 	db	255
  1154                           
  1155                           ;Config register IDLOC4 @ 0x200004
  1156                           ;	unspecified, using default values
  1157  200004                     	org	2097156
  1158  200004  FF                 	db	255
  1159                           
  1160                           ;Config register IDLOC5 @ 0x200005
  1161                           ;	unspecified, using default values
  1162  200005                     	org	2097157
  1163  200005  FF                 	db	255
  1164                           
  1165                           ;Config register IDLOC6 @ 0x200006
  1166                           ;	unspecified, using default values
  1167  200006                     	org	2097158
  1168  200006  FF                 	db	255
  1169                           
  1170                           ;Config register IDLOC7 @ 0x200007
  1171                           ;	unspecified, using default values
  1172  200007                     	org	2097159
  1173  200007  FF                 	db	255
  1174                           
  1175                           	psect	config
  1176                           
  1177                           ;Config register CONFIG1L @ 0x300000
  1178                           ;	PLL Prescaler Selection bits
  1179                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1180                           ;	System Clock Postscaler Selection bits
  1181                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1182                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1183                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1184  300000                     	org	3145728
  1185  300000  00                 	db	0
  1186                           
  1187                           ;Config register CONFIG1H @ 0x300001
  1188                           ;	Oscillator Selection bits
  1189                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  1190                           ;	Fail-Safe Clock Monitor Enable bit
  1191                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1192                           ;	Internal/External Oscillator Switchover bit
  1193                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1194  300001                     	org	3145729
  1195  300001  09                 	db	9
  1196                           
  1197                           ;Config register CONFIG2L @ 0x300002
  1198                           ;	Power-up Timer Enable bit
  1199                           ;	PWRT = OFF, PWRT disabled
  1200                           ;	Brown-out Reset Enable bits
  1201                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1202                           ;	Brown-out Reset Voltage bits
  1203                           ;	BORV = 3, Minimum setting 2.05V
  1204                           ;	USB Voltage Regulator Enable bit
  1205                           ;	VREGEN = OFF, USB voltage regulator disabled
  1206  300002                     	org	3145730
  1207  300002  1F                 	db	31
  1208                           
  1209                           ;Config register CONFIG2H @ 0x300003
  1210                           ;	Watchdog Timer Enable bit
  1211                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1212                           ;	Watchdog Timer Postscale Select bits
  1213                           ;	WDTPS = 32768, 1:32768
  1214  300003                     	org	3145731
  1215  300003  1E                 	db	30
  1216                           
  1217                           ; Padding undefined space
  1218  300004                     	org	3145732
  1219  300004  FF                 	db	255
  1220                           
  1221                           ;Config register CONFIG3H @ 0x300005
  1222                           ;	CCP2 MUX bit
  1223                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1224                           ;	PORTB A/D Enable bit
  1225                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  1226                           ;	Low-Power Timer 1 Oscillator Enable bit
  1227                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1228                           ;	MCLR Pin Enable bit
  1229                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  1230  300005                     	org	3145733
  1231  300005  03                 	db	3
  1232                           
  1233                           ;Config register CONFIG4L @ 0x300006
  1234                           ;	Stack Full/Underflow Reset Enable bit
  1235                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1236                           ;	Single-Supply ICSP Enable bit
  1237                           ;	LVP = OFF, Single-Supply ICSP disabled
  1238                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1239                           ;	ICPRT = OFF, ICPORT disabled
  1240                           ;	Extended Instruction Set Enable bit
  1241                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1242                           ;	Background Debugger Enable bit
  1243                           ;	DEBUG = 0x1, unprogrammed default
  1244  300006                     	org	3145734
  1245  300006  81                 	db	129
  1246                           
  1247                           ; Padding undefined space
  1248  300007                     	org	3145735
  1249  300007  FF                 	db	255
  1250                           
  1251                           ;Config register CONFIG5L @ 0x300008
  1252                           ;	Code Protection bit
  1253                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1254                           ;	Code Protection bit
  1255                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1256                           ;	Code Protection bit
  1257                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1258                           ;	Code Protection bit
  1259                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1260  300008                     	org	3145736
  1261  300008  0F                 	db	15
  1262                           
  1263                           ;Config register CONFIG5H @ 0x300009
  1264                           ;	Boot Block Code Protection bit
  1265                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1266                           ;	Data EEPROM Code Protection bit
  1267                           ;	CPD = OFF, Data EEPROM is not code-protected
  1268  300009                     	org	3145737
  1269  300009  C0                 	db	192
  1270                           
  1271                           ;Config register CONFIG6L @ 0x30000A
  1272                           ;	Write Protection bit
  1273                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1274                           ;	Write Protection bit
  1275                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1276                           ;	Write Protection bit
  1277                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1278                           ;	Write Protection bit
  1279                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1280  30000A                     	org	3145738
  1281  30000A  0F                 	db	15
  1282                           
  1283                           ;Config register CONFIG6H @ 0x30000B
  1284                           ;	Configuration Register Write Protection bit
  1285                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1286                           ;	Boot Block Write Protection bit
  1287                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1288                           ;	Data EEPROM Write Protection bit
  1289                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1290  30000B                     	org	3145739
  1291  30000B  E0                 	db	224
  1292                           
  1293                           ;Config register CONFIG7L @ 0x30000C
  1294                           ;	Table Read Protection bit
  1295                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1296                           ;	Table Read Protection bit
  1297                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1298                           ;	Table Read Protection bit
  1299                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1300                           ;	Table Read Protection bit
  1301                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1302  30000C                     	org	3145740
  1303  30000C  0F                 	db	15
  1304                           
  1305                           ;Config register CONFIG7H @ 0x30000D
  1306                           ;	Boot Block Table Read Protection bit
  1307                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1308  30000D                     	org	3145741
  1309  30000D  40                 	db	64
  1310                           tosu	equ	0xFFF
  1311                           tosh	equ	0xFFE
  1312                           tosl	equ	0xFFD
  1313                           stkptr	equ	0xFFC
  1314                           pclatu	equ	0xFFB
  1315                           pclath	equ	0xFFA
  1316                           pcl	equ	0xFF9
  1317                           tblptru	equ	0xFF8
  1318                           tblptrh	equ	0xFF7
  1319                           tblptrl	equ	0xFF6
  1320                           tablat	equ	0xFF5
  1321                           prodh	equ	0xFF4
  1322                           prodl	equ	0xFF3
  1323                           indf0	equ	0xFEF
  1324                           postinc0	equ	0xFEE
  1325                           postdec0	equ	0xFED
  1326                           preinc0	equ	0xFEC
  1327                           plusw0	equ	0xFEB
  1328                           fsr0h	equ	0xFEA
  1329                           fsr0l	equ	0xFE9
  1330                           wreg	equ	0xFE8
  1331                           indf1	equ	0xFE7
  1332                           postinc1	equ	0xFE6
  1333                           postdec1	equ	0xFE5
  1334                           preinc1	equ	0xFE4
  1335                           plusw1	equ	0xFE3
  1336                           fsr1h	equ	0xFE2
  1337                           fsr1l	equ	0xFE1
  1338                           bsr	equ	0xFE0
  1339                           indf2	equ	0xFDF
  1340                           postinc2	equ	0xFDE
  1341                           postdec2	equ	0xFDD
  1342                           preinc2	equ	0xFDC
  1343                           plusw2	equ	0xFDB
  1344                           fsr2h	equ	0xFDA
  1345                           fsr2l	equ	0xFD9
  1346                           status	equ	0xFD8

Data Sizes:
    Strings     14
    Constant    0
    Data        8
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     15      23
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    LCD_String_xy@str	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), STR_2(CODE[4]), STR_1(CODE[4]), 

    LCD_String@msg	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMRAM

    _main->_SensorLuz
    _SensorLuz->_LCD_String_xy
    _SensorLuz->_adc
    _adc->___lwdiv
    _LCD_String_xy->_LCD_String
    _LCD_String->_LCD_Char
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0    3986
                           _ADC_Init
                           _LCD_Init
                          _SensorLuz
 ---------------------------------------------------------------------------------
 (1) _SensorLuz                                            2     2      0    2868
                                             13 COMRAM     2     2      0
                        _LCD_Command
                      _LCD_String_xy
                                _adc
 ---------------------------------------------------------------------------------
 (2) _adc                                                  6     4      2     360
                                              7 COMRAM     6     4      2
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _LCD_String_xy                                        4     1      3    1915
                                              9 COMRAM     4     1      3
                        _LCD_Command
                         _LCD_String
 ---------------------------------------------------------------------------------
 (3) _LCD_String                                           2     0      2     691
                                              7 COMRAM     2     0      2
                           _LCD_Char
 ---------------------------------------------------------------------------------
 (4) _LCD_Char                                             1     1      0     570
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0    1118
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (3) _LCD_Command                                          1     1      0     570
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (5) _MSdelay                                              6     4      2     548
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _SensorLuz
     _LCD_Command
       _MSdelay
     _LCD_String_xy
       _LCD_Command
         _MSdelay
       _LCD_String
         _LCD_Char
           _MSdelay
     _adc
       ___lwdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      F      17       1       24.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      17      20        0.0%
DATA                 0      0      17       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Dec 10 10:23:22 2020

           ?_LCD_Command 0001                       l21 0B10                       l60 0B22  
                     l71 0982                       l74 09CE                       l95 0A58  
                     _GO 007E11              ?_LCD_String 0008                      l101 0AF8  
                    l110 0A8E                      l104 0ADA                      l120 089C  
                    l116 0890                      l134 0A18                      l635 0910  
                    l628 0908                      l912 0AFA                      l914 0AFC  
                    l980 09D0                      l990 09E8                      l982 09DC  
                    l992 09FE                      l994 0A02                      l988 09E4  
                    l996 0AC0                      l998 0AC4                      u220 09FE  
                    u300 0842                      u221 09FA                      u301 083E  
                    u230 0A18                      u310 0862                      u231 0A14  
                    u311 085E                      u240 0A8E                      u320 0882  
                    u241 0A8A                      u321 087E                      u250 08B8  
                    u330 0950                      u251 08B4                      u331 094C  
                    u260 08D6                      u261 08D2                      u270 08F2  
                    u271 08EE                      u280 0990                      u281 098C  
                    u290 0822                      u291 081E                      _adc 0982  
                   ?_adc 0008                     l1000 0AC6                     l1010 0ADE  
                   l1002 0AC8                     l1020 0AEA                     l1012 0AE2  
                   l1004 0ACA                     l1100 0916                     l1022 0AEC  
                   l1014 0AE4                     l1006 0ACC                     l1030 0A72  
                   l1110 0968                     l1102 0928                     l1016 0AE6  
                   l1008 0ACE                     l1024 0A5A                     l1040 08C8  
                   l1032 089E                     l1112 097A                     l1104 093A  
                   l1120 0B1E                     l1018 0AE8                     l1026 0A5E  
                   l1050 08FC                     l1042 08D6                     l1034 08A6  
                   l1106 0950                     l1114 0B12                     l1028 0A6E  
                   l1052 0902                     l1044 08DC                     l1036 08B8  
                   l1060 09C6                     l1108 0962                     l1116 0B16  
                   l1070 0842                     l1046 08F2                     l1038 08C0  
                   l1054 0982                     l1118 0B1A                     l1072 0850  
                   l1080 0890                     l1064 0812                     l1048 08FA  
                   l1056 0990                     l1090 0A3A                     l1082 0A1A  
                   l1074 0862                     l1066 0822                     l1058 09A6  
                   l1092 0A40                     l1084 0A22                     l1076 0870  
                   l1068 0830                     l1094 0A46                     l1086 0A2E  
                   l1078 0882                     l1096 0A52                     l1088 0A34  
                   l1098 0912                     _ADON 007E10                     STR_1 0807  
                   STR_2 080B                     STR_3 0801                     _LATB 000F8A  
                   _main 0B12                     fsr1l 000FE1         __end_of_ADC_Init 0B12  
                   start 0000          __end_of_MSdelay 0A1A            _LCD_String_xy 0810  
           ___param_bank 000000                    ??_adc 000A         __end_of_LCD_Char 0ADC  
       __end_of_LCD_Init 0A5A                    ?_main 0001                    _LATD0 007C60  
                  _LATD1 007C61                    _LATD2 007C62          __end_of___lwdiv 0912  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISD 000F95  
                  tablat 000FF5                    status 000FD8      __size_of_LCD_String 0036  
         ?_LCD_String_xy 000A          __initialization 0A90             __end_of_main 0B26  
                 ??_main 0010            __activetblptr 000001                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0                   _ADRESH 000FC4  
                 _ADRESL 000FC3         LCD_String_xy@pos 000A         LCD_String_xy@row 000D  
       LCD_String_xy@str 000B                ??_MSdelay 0003                   _OSCCON 000FD3  
                 _TRISA1 007C91                   _TRISD2 007CAA                ??___lwdiv 0005  
   __size_of_LCD_Command 001E       __size_of_SensorLuz 0070             __pdataCOMRAM 0010  
              ?_ADC_Init 0001             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ?_LCD_Char 0001  
             __accesstop 0060  __end_of__initialization 0AB0                ?_LCD_Init 0001  
        ??_LCD_String_xy 000D            ___rparam_used 000001           __pcstackCOMRAM 0001  
           ??_LCD_String 000A               ??_ADC_Init 0001               ??_LCD_Char 0007  
             _character1 0010               ??_LCD_Init 0008        __end_of_SensorLuz 0982  
     __end_of_LCD_String 0A90                  _MSdelay 09D0            LCD_String@msg 0008  
                __Hparam 0000                  __Lparam 0000                  ___lwdiv 089E  
           __psmallconst 0800                  __pcinit 0A90                  __ramtop 0800  
                __ptext0 0B12                  __ptext1 0912                  __ptext2 0982  
                __ptext3 089E                  __ptext4 0810                  __ptext5 0A5A  
                __ptext6 0ABE                  __ptext7 0A1A                  __ptext8 0ADC  
                __ptext9 09D0             __size_of_adc 004E     end_of_initialization 0AB0  
         LCD_Command@cmd 0007                  postdec1 000FE5                  postinc0 000FEE  
      __size_of_ADC_Init 0018        __size_of_LCD_Char 001E        __size_of_LCD_Init 0040  
          ??_LCD_Command 0007        LCD_Char@char_data 0007            __pidataCOMRAM 0B26  
    start_initialization 0A90              __end_of_adc 09D0    __end_of_LCD_String_xy 089E  
              _SensorLuz 0912                adc@adcval 000C      __end_of_LCD_Command 0AFA  
               ?_MSdelay 0001         ___lwdiv@dividend 0001               ?_SensorLuz 0001  
               ?___lwdiv 0001              __smallconst 0800                 _ADC_Init 0AFA  
       ___lwdiv@quotient 0005                 MSdelay@i 0003                 MSdelay@j 0005  
               _LCD_Char 0ABE                 _LCD_Init 0A1A                 _GO_nDONE 007E11  
            _LCD_Command 0ADC               _ADCON0bits 000FC2                copy_data0 0AA4  
           SensorLuz@val 000E         __size_of_MSdelay 004A                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0800              ??_SensorLuz 000E  
       __size_of___lwdiv 0074          ___lwdiv@divisor 0003          ___lwdiv@counter 0007  
               __ptext10 0AFA            __size_of_main 0014               MSdelay@val 0001  
             _LCD_String 0A5A   __size_of_LCD_String_xy 008E  
