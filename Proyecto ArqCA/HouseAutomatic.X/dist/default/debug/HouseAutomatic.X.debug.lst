

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Dec 10 14:14:26 2020

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4550 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  007DFE                     __pidataCOMRAM:
    60                           	callstack 0
    61                           
    62                           ;initializer for _character1
    63  007DFE  01                 	db	1
    64  007DFF  00                 	db	0
    65  007E00  1F                 	db	31
    66  007E01  04                 	db	4
    67  007E02  04                 	db	4
    68  007E03  04                 	db	4
    69  007E04  04                 	db	4
    70  007E05  04                 	db	4
    71                           
    72                           ;initializer for _character3
    73  007E06  00                 	db	0
    74  007E07  04                 	db	4
    75  007E08  04                 	db	4
    76  007E09  04                 	db	4
    77  007E0A  1F                 	db	31
    78  007E0B  0E                 	db	14
    79  007E0C  04                 	db	4
    80  007E0D  00                 	db	0
    81                           
    82                           ;initializer for _character2
    83  007E0E  00                 	db	0
    84  007E0F  04                 	db	4
    85  007E10  0E                 	db	14
    86  007E11  1F                 	db	31
    87  007E12  04                 	db	4
    88  007E13  04                 	db	4
    89  007E14  04                 	db	4
    90  007E15  00                 	db	0
    91  0000                     _PORTDbits	set	3971
    92  0000                     _ADCON2bits	set	4032
    93  0000                     _ADCON1bits	set	4033
    94  0000                     _TRISAbits	set	3986
    95  0000                     _TRISDbits	set	3989
    96  0000                     _OSCCON	set	4051
    97  0000                     _LATB	set	3978
    98  0000                     _TRISB	set	3987
    99  0000                     _TRISD	set	3989
   100  0000                     _ADCON0bits	set	4034
   101  0000                     _ADRESL	set	4035
   102  0000                     _ADRESH	set	4036
   103  0000                     _ADCON2	set	4032
   104  0000                     _ADCON1	set	4033
   105  0000                     _ADCON0	set	4034
   106  0000                     _TRISA	set	3986
   107  0000                     _LATD1	set	31841
   108  0000                     _RW	set	32314
   109  0000                     _LATD0	set	31840
   110  0000                     _GO	set	32273
   111  0000                     _ADON	set	32272
   112                           
   113                           ; #config settings
   114                           
   115                           	psect	cinit
   116  007E72                     __pcinit:
   117                           	callstack 0
   118  007E72                     start_initialization:
   119                           	callstack 0
   120  007E72                     __initialization:
   121                           	callstack 0
   122                           
   123                           ; Initialize objects allocated to COMRAM (24 bytes)
   124                           ; load TBLPTR registers with __pidataCOMRAM
   125  007E72  0EFE               	movlw	low __pidataCOMRAM
   126  007E74  6EF6               	movwf	tblptrl,c
   127  007E76  0E7D               	movlw	high __pidataCOMRAM
   128  007E78  6EF7               	movwf	tblptrh,c
   129  007E7A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   130  007E7C  6EF8               	movwf	tblptru,c
   131  007E7E  EE00  F001         	lfsr	0,__pdataCOMRAM
   132  007E82  EE10 F018          	lfsr	1,24
   133  007E86                     copy_data0:
   134  007E86  0009               	tblrd		*+
   135  007E88  CFF5 FFEE          	movff	tablat,postinc0
   136  007E8C  50E5               	movf	postdec1,w,c
   137  007E8E  50E1               	movf	fsr1l,w,c
   138  007E90  E1FA               	bnz	copy_data0
   139  007E92                     end_of_initialization:
   140                           	callstack 0
   141  007E92                     __end_of__initialization:
   142                           	callstack 0
   143  007E92  0100               	movlb	0
   144  007E94  EFE9  F03E         	goto	_main	;jump to C main() function
   145                           
   146                           	psect	dataCOMRAM
   147  000001                     __pdataCOMRAM:
   148                           	callstack 0
   149  000001                     _character1:
   150                           	callstack 0
   151  000001                     	ds	8
   152  000009                     _character3:
   153                           	callstack 0
   154  000009                     	ds	8
   155  000011                     _character2:
   156                           	callstack 0
   157  000011                     	ds	8
   158                           
   159                           	psect	cstackCOMRAM
   160  000019                     __pcstackCOMRAM:
   161                           	callstack 0
   162  000019                     ?_adc:
   163                           	callstack 0
   164  000019                     MSdelay@val:
   165                           	callstack 0
   166                           
   167                           ; 2 bytes @ 0x0
   168  000019                     	ds	2
   169  00001B                     MSdelay@i:
   170                           	callstack 0
   171  00001B                     adc@adcval:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0x2
   175  00001B                     	ds	2
   176  00001D                     MSdelay@j:
   177                           	callstack 0
   178                           
   179                           ; 2 bytes @ 0x4
   180  00001D                     	ds	2
   181  00001F                     LCD_Command@cmd:
   182                           	callstack 0
   183  00001F                     LCD_Char@char_data:
   184                           	callstack 0
   185                           
   186                           ; 1 bytes @ 0x6
   187  00001F                     	ds	1
   188  000020                     LCD_Custom_Char@msg:
   189                           	callstack 0
   190                           
   191                           ; 2 bytes @ 0x7
   192  000020                     	ds	2
   193  000022                     LCD_Custom_Char@loc:
   194                           	callstack 0
   195                           
   196                           ; 1 bytes @ 0x9
   197  000022                     	ds	1
   198  000023                     LCD_Custom_Char@i:
   199                           	callstack 0
   200                           
   201                           ; 1 bytes @ 0xA
   202  000023                     	ds	1
   203  000024                     SensorLuz@val:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0xB
   207  000024                     	ds	2
   208  000026                     
   209                           ; 1 bytes @ 0xD
   210 ;;
   211 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   212 ;;
   213 ;; *************** function _main *****************
   214 ;; Defined at:
   215 ;;		line 19 in file "Controler.c"
   216 ;; Parameters:    Size  Location     Type
   217 ;;		None
   218 ;; Auto vars:     Size  Location     Type
   219 ;;  Temperature    10    0        unsigned char [10]
   220 ;;  celsius         4    0        float 
   221 ;;  i               1    0        unsigned char 
   222 ;; Return value:  Size  Location     Type
   223 ;;                  1    wreg      void 
   224 ;; Registers used:
   225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   226 ;; Tracked objects:
   227 ;;		On entry : 0/0
   228 ;;		On exit  : 0/0
   229 ;;		Unchanged: 0/0
   230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   231 ;;      Params:         0       0       0       0       0       0       0       0       0
   232 ;;      Locals:         0       0       0       0       0       0       0       0       0
   233 ;;      Temps:          0       0       0       0       0       0       0       0       0
   234 ;;      Totals:         0       0       0       0       0       0       0       0       0
   235 ;;Total ram usage:        0 bytes
   236 ;; Hardware stack levels required when called:    4
   237 ;; This function calls:
   238 ;;		_ADC_Init
   239 ;;		_LCD_Init
   240 ;;		_SensorLuz
   241 ;; This function is called by:
   242 ;;		Startup code after reset
   243 ;; This function uses a non-reentrant model
   244 ;;
   245                           
   246                           	psect	text0
   247  007DD2                     __ptext0:
   248                           	callstack 0
   249  007DD2                     _main:
   250                           	callstack 27
   251  007DD2                     
   252                           ;Controler.c: 20:     char i;;Controler.c: 21:     char Temperature[10];;Controler.c: 22
      +                          :     float celsius;;Controler.c: 23:     OSCCON = 0x72;
   253  007DD2  0E72               	movlw	114
   254  007DD4  6ED3               	movwf	211,c	;volatile
   255  007DD6                     
   256                           ;Controler.c: 24:     LCD_Init();
   257  007DD6  EC4C  F03F         	call	_LCD_Init	;wreg free
   258  007DDA                     
   259                           ;Controler.c: 25:     ADC_Init();
   260  007DDA  ECF3  F03E         	call	_ADC_Init	;wreg free
   261  007DDE                     
   262                           ;Controler.c: 45:     SensorLuz();
   263  007DDE  ECB5  F03F         	call	_SensorLuz	;wreg free
   264  007DE2  EF00  F000         	goto	start
   265  007DE6                     __end_of_main:
   266                           	callstack 0
   267                           
   268 ;; *************** function _SensorLuz *****************
   269 ;; Defined at:
   270 ;;		line 49 in file "Controler.c"
   271 ;; Parameters:    Size  Location     Type
   272 ;;		None
   273 ;; Auto vars:     Size  Location     Type
   274 ;;  val             2   11[COMRAM] unsigned int 
   275 ;; Return value:  Size  Location     Type
   276 ;;                  1    wreg      void 
   277 ;; Registers used:
   278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   279 ;; Tracked objects:
   280 ;;		On entry : 0/0
   281 ;;		On exit  : 0/0
   282 ;;		Unchanged: 0/0
   283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   284 ;;      Params:         0       0       0       0       0       0       0       0       0
   285 ;;      Locals:         2       0       0       0       0       0       0       0       0
   286 ;;      Temps:          0       0       0       0       0       0       0       0       0
   287 ;;      Totals:         2       0       0       0       0       0       0       0       0
   288 ;;Total ram usage:        2 bytes
   289 ;; Hardware stack levels used:    1
   290 ;; Hardware stack levels required when called:    3
   291 ;; This function calls:
   292 ;;		_LCD_Command
   293 ;;		_LCD_Custom_Char
   294 ;;		_MSdelay
   295 ;;		_adc
   296 ;; This function is called by:
   297 ;;		_main
   298 ;; This function uses a non-reentrant model
   299 ;;
   300                           
   301                           	psect	text1
   302  007F6A                     __ptext1:
   303                           	callstack 0
   304  007F6A                     _SensorLuz:
   305                           	callstack 27
   306  007F6A                     
   307                           ;Controler.c: 50:     unsigned int val;;Controler.c: 51:     TRISDbits.RD2 = 0;
   308  007F6A  9495               	bcf	149,2,c	;volatile
   309                           
   310                           ;Controler.c: 52:     TRISAbits.RA1 = 1;
   311  007F6C  8292               	bsf	146,1,c	;volatile
   312  007F6E                     
   313                           ;Controler.c: 53:     ADCON1bits.PCFG = 0b1101;
   314  007F6E  50C1               	movf	193,w,c	;volatile
   315  007F70  0BF0               	andlw	-16
   316  007F72  090D               	iorlw	13
   317  007F74  6EC1               	movwf	193,c	;volatile
   318                           
   319                           ;Controler.c: 54:     ADCON1bits.VCFG = 0b00;
   320  007F76  0ECF               	movlw	-49
   321  007F78  16C1               	andwf	193,f,c	;volatile
   322                           
   323                           ;Controler.c: 55:     ADCON0bits.CHS = 0001;
   324  007F7A  50C2               	movf	194,w,c	;volatile
   325  007F7C  0BC3               	andlw	-61
   326  007F7E  0904               	iorlw	4
   327  007F80  6EC2               	movwf	194,c	;volatile
   328                           
   329                           ;Controler.c: 56:     ADCON2bits.ACQT = 0b010;
   330  007F82  50C0               	movf	192,w,c	;volatile
   331  007F84  0BC7               	andlw	-57
   332  007F86  0910               	iorlw	16
   333  007F88  6EC0               	movwf	192,c	;volatile
   334                           
   335                           ;Controler.c: 57:     ADCON2bits.ADCS = 0b001;
   336  007F8A  50C0               	movf	192,w,c	;volatile
   337  007F8C  0BF8               	andlw	-8
   338  007F8E  0901               	iorlw	1
   339  007F90  6EC0               	movwf	192,c	;volatile
   340  007F92                     
   341                           ;Controler.c: 58:     ADCON2bits.ADFM = 0;
   342  007F92  9EC0               	bcf	192,7,c	;volatile
   343  007F94                     
   344                           ;Controler.c: 59:     ADCON0bits.ADON = 1;
   345  007F94  80C2               	bsf	194,0,c	;volatile
   346  007F96                     l1062:
   347                           
   348                           ;Controler.c: 62:         LCD_Command(0x40);
   349  007F96  0E40               	movlw	64
   350  007F98  EC0B  F03F         	call	_LCD_Command
   351  007F9C                     
   352                           ;Controler.c: 63:         val = adc();
   353  007F9C  EC29  F03F         	call	_adc	;wreg free
   354  007FA0  C019  F024         	movff	?_adc,SensorLuz@val
   355  007FA4  C01A  F025         	movff	?_adc+1,SensorLuz@val+1
   356  007FA8                     
   357                           ;Controler.c: 65:         if(val>3){
   358  007FA8  5025               	movf	(SensorLuz@val+1)^0,w,c
   359  007FAA  E109               	bnz	u250
   360  007FAC  0E04               	movlw	4
   361  007FAE  5C24               	subwf	SensorLuz@val^0,w,c
   362  007FB0  A0D8               	btfss	status,0,c
   363  007FB2  EFDD  F03F         	goto	u251
   364  007FB6  EFDF  F03F         	goto	u250
   365  007FBA                     u251:
   366  007FBA  EFEF  F03F         	goto	l1074
   367  007FBE                     u250:
   368  007FBE                     
   369                           ;Controler.c: 66:            LCD_Custom_Char(2, character2);
   370  007FBE  0E11               	movlw	low _character2
   371  007FC0  6E20               	movwf	LCD_Custom_Char@msg^0,c
   372  007FC2  0E00               	movlw	high _character2
   373  007FC4  6E21               	movwf	(LCD_Custom_Char@msg+1)^0,c
   374  007FC6  0E02               	movlw	2
   375  007FC8  EC6C  F03F         	call	_LCD_Custom_Char
   376  007FCC                     
   377                           ;Controler.c: 67:            MSdelay(10);
   378  007FCC  0E00               	movlw	0
   379  007FCE  6E1A               	movwf	(MSdelay@val+1)^0,c
   380  007FD0  0E0A               	movlw	10
   381  007FD2  6E19               	movwf	MSdelay@val^0,c
   382  007FD4  EC90  F03F         	call	_MSdelay	;wreg free
   383  007FD8                     
   384                           ;Controler.c: 68:            PORTDbits.RD2 = 1;
   385  007FD8  8483               	bsf	131,2,c	;volatile
   386                           
   387                           ;Controler.c: 70:         }else{
   388  007FDA  EFCB  F03F         	goto	l1062
   389  007FDE                     l1074:
   390                           
   391                           ;Controler.c: 71:             LCD_Custom_Char(3, character3);
   392  007FDE  0E09               	movlw	low _character3
   393  007FE0  6E20               	movwf	LCD_Custom_Char@msg^0,c
   394  007FE2  0E00               	movlw	high _character3
   395  007FE4  6E21               	movwf	(LCD_Custom_Char@msg+1)^0,c
   396  007FE6  0E03               	movlw	3
   397  007FE8  EC6C  F03F         	call	_LCD_Custom_Char
   398  007FEC                     
   399                           ;Controler.c: 72:             MSdelay(10);
   400  007FEC  0E00               	movlw	0
   401  007FEE  6E1A               	movwf	(MSdelay@val+1)^0,c
   402  007FF0  0E0A               	movlw	10
   403  007FF2  6E19               	movwf	MSdelay@val^0,c
   404  007FF4  EC90  F03F         	call	_MSdelay	;wreg free
   405  007FF8                     
   406                           ;Controler.c: 73:             PORTDbits.RD2 = 0;
   407  007FF8  9483               	bcf	131,2,c	;volatile
   408  007FFA  EFCB  F03F         	goto	l1062
   409  007FFE  0012               	return		;funcret
   410  008000                     __end_of_SensorLuz:
   411                           	callstack 0
   412                           
   413 ;; *************** function _adc *****************
   414 ;; Defined at:
   415 ;;		line 79 in file "Controler.c"
   416 ;; Parameters:    Size  Location     Type
   417 ;;		None
   418 ;; Auto vars:     Size  Location     Type
   419 ;;  adcval          2    2[COMRAM] unsigned int 
   420 ;; Return value:  Size  Location     Type
   421 ;;                  2    0[COMRAM] unsigned int 
   422 ;; Registers used:
   423 ;;		None
   424 ;; Tracked objects:
   425 ;;		On entry : 0/0
   426 ;;		On exit  : 0/0
   427 ;;		Unchanged: 0/0
   428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   429 ;;      Params:         2       0       0       0       0       0       0       0       0
   430 ;;      Locals:         2       0       0       0       0       0       0       0       0
   431 ;;      Temps:          0       0       0       0       0       0       0       0       0
   432 ;;      Totals:         4       0       0       0       0       0       0       0       0
   433 ;;Total ram usage:        4 bytes
   434 ;; Hardware stack levels used:    1
   435 ;; This function calls:
   436 ;;		Nothing
   437 ;; This function is called by:
   438 ;;		_SensorLuz
   439 ;; This function uses a non-reentrant model
   440 ;;
   441                           
   442                           	psect	text2
   443  007E52                     __ptext2:
   444                           	callstack 0
   445  007E52                     _adc:
   446                           	callstack 29
   447  007E52                     
   448                           ;Controler.c: 80:     unsigned int adcval;;Controler.c: 81:     ADCON0bits.GO_DONE = 1;
   449  007E52  82C2               	bsf	194,1,c	;volatile
   450  007E54                     l139:
   451  007E54  B2C2               	btfsc	194,1,c	;volatile
   452  007E56  EF2F  F03F         	goto	u231
   453  007E5A  EF31  F03F         	goto	u230
   454  007E5E                     u231:
   455  007E5E  EF2A  F03F         	goto	l139
   456  007E62                     u230:
   457  007E62                     
   458                           ;Controler.c: 83:     adcval = ADRESL;
   459  007E62  CFC3 F01B          	movff	4035,adc@adcval	;volatile
   460  007E66  6A1C               	clrf	(adc@adcval+1)^0,c
   461                           
   462                           ;Controler.c: 85:     return adcval;
   463  007E68  C01B  F019         	movff	adc@adcval,?_adc
   464  007E6C  C01C  F01A         	movff	adc@adcval+1,?_adc+1
   465  007E70  0012               	return		;funcret
   466  007E72                     __end_of_adc:
   467                           	callstack 0
   468                           
   469 ;; *************** function _LCD_Custom_Char *****************
   470 ;; Defined at:
   471 ;;		line 77 in file "LCD_20x4.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;  loc             1    wreg     unsigned char 
   474 ;;  msg             2    7[COMRAM] PTR unsigned char 
   475 ;;		 -> character3(8), character2(8), 
   476 ;; Auto vars:     Size  Location     Type
   477 ;;  loc             1    9[COMRAM] unsigned char 
   478 ;;  i               1   10[COMRAM] unsigned char 
   479 ;; Return value:  Size  Location     Type
   480 ;;                  1    wreg      void 
   481 ;; Registers used:
   482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   483 ;; Tracked objects:
   484 ;;		On entry : 0/0
   485 ;;		On exit  : 0/0
   486 ;;		Unchanged: 0/0
   487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   488 ;;      Params:         2       0       0       0       0       0       0       0       0
   489 ;;      Locals:         2       0       0       0       0       0       0       0       0
   490 ;;      Temps:          0       0       0       0       0       0       0       0       0
   491 ;;      Totals:         4       0       0       0       0       0       0       0       0
   492 ;;Total ram usage:        4 bytes
   493 ;; Hardware stack levels used:    1
   494 ;; Hardware stack levels required when called:    2
   495 ;; This function calls:
   496 ;;		_LCD_Char
   497 ;;		_LCD_Command
   498 ;; This function is called by:
   499 ;;		_SensorLuz
   500 ;; This function uses a non-reentrant model
   501 ;;
   502                           
   503                           	psect	text3
   504  007ED8                     __ptext3:
   505                           	callstack 0
   506  007ED8                     _LCD_Custom_Char:
   507                           	callstack 27
   508                           
   509                           ;incstack = 0
   510                           ;LCD_Custom_Char@loc stored from wreg
   511  007ED8  6E22               	movwf	LCD_Custom_Char@loc^0,c
   512  007EDA                     
   513                           ;LCD_20x4.c: 77: void LCD_Custom_Char(unsigned char loc,unsigned char *msg);LCD_20x4.c: 
      +                          78: {;LCD_20x4.c: 79:     unsigned char i;;LCD_20x4.c: 80:     if(loc<8)
   514  007EDA  0E08               	movlw	8
   515  007EDC  6022               	cpfslt	LCD_Custom_Char@loc^0,c
   516  007EDE  EF73  F03F         	goto	u211
   517  007EE2  EF75  F03F         	goto	u210
   518  007EE6                     u211:
   519  007EE6  EF8F  F03F         	goto	l79
   520  007EEA                     u210:
   521  007EEA                     
   522                           ;LCD_20x4.c: 81:     {;LCD_20x4.c: 82:      LCD_Command(0x40+(loc*8));
   523  007EEA  5022               	movf	LCD_Custom_Char@loc^0,w,c
   524  007EEC  0D08               	mullw	8
   525  007EEE  50F3               	movf	243,w,c
   526  007EF0  0F40               	addlw	64
   527  007EF2  EC0B  F03F         	call	_LCD_Command
   528  007EF6                     
   529                           ;LCD_20x4.c: 83:        for(i=0;i<8;i++)
   530  007EF6  0E00               	movlw	0
   531  007EF8  6E23               	movwf	LCD_Custom_Char@i^0,c
   532  007EFA                     l1022:
   533                           
   534                           ;LCD_20x4.c: 84:            LCD_Char(msg[i]);
   535  007EFA  5023               	movf	LCD_Custom_Char@i^0,w,c
   536  007EFC  2420               	addwf	LCD_Custom_Char@msg^0,w,c
   537  007EFE  6ED9               	movwf	fsr2l,c
   538  007F00  0E00               	movlw	0
   539  007F02  2021               	addwfc	(LCD_Custom_Char@msg+1)^0,w,c
   540  007F04  6EDA               	movwf	fsr2h,c
   541  007F06  50DF               	movf	indf2,w,c
   542  007F08  EC1A  F03F         	call	_LCD_Char
   543  007F0C  2A23               	incf	LCD_Custom_Char@i^0,f,c
   544  007F0E  0E07               	movlw	7
   545  007F10  6423               	cpfsgt	LCD_Custom_Char@i^0,c
   546  007F12  EF8D  F03F         	goto	u221
   547  007F16  EF8F  F03F         	goto	u220
   548  007F1A                     u221:
   549  007F1A  EF7D  F03F         	goto	l1022
   550  007F1E                     u220:
   551  007F1E                     l79:
   552  007F1E  0012               	return		;funcret
   553  007F20                     __end_of_LCD_Custom_Char:
   554                           	callstack 0
   555                           
   556 ;; *************** function _LCD_Char *****************
   557 ;; Defined at:
   558 ;;		line 42 in file "LCD_20x4.c"
   559 ;; Parameters:    Size  Location     Type
   560 ;;  char_data       1    wreg     unsigned char 
   561 ;; Auto vars:     Size  Location     Type
   562 ;;  char_data       1    6[COMRAM] unsigned char 
   563 ;; Return value:  Size  Location     Type
   564 ;;                  1    wreg      void 
   565 ;; Registers used:
   566 ;;		wreg, status,2, status,0, cstack
   567 ;; Tracked objects:
   568 ;;		On entry : 0/0
   569 ;;		On exit  : 0/0
   570 ;;		Unchanged: 0/0
   571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   572 ;;      Params:         0       0       0       0       0       0       0       0       0
   573 ;;      Locals:         1       0       0       0       0       0       0       0       0
   574 ;;      Temps:          0       0       0       0       0       0       0       0       0
   575 ;;      Totals:         1       0       0       0       0       0       0       0       0
   576 ;;Total ram usage:        1 bytes
   577 ;; Hardware stack levels used:    1
   578 ;; Hardware stack levels required when called:    1
   579 ;; This function calls:
   580 ;;		_MSdelay
   581 ;; This function is called by:
   582 ;;		_LCD_Custom_Char
   583 ;;		_LCD_String
   584 ;; This function uses a non-reentrant model
   585 ;;
   586                           
   587                           	psect	text4
   588  007E34                     __ptext4:
   589                           	callstack 0
   590  007E34                     _LCD_Char:
   591                           	callstack 27
   592                           
   593                           ;incstack = 0
   594                           ;LCD_Char@char_data stored from wreg
   595  007E34  6E1F               	movwf	LCD_Char@char_data^0,c
   596  007E36                     
   597                           ;LCD_20x4.c: 42: void LCD_Char(char char_data);LCD_20x4.c: 43: {;LCD_20x4.c: 44:  LATB =
      +                           char_data;
   598  007E36  C01F  FF8A         	movff	LCD_Char@char_data,3978	;volatile
   599  007E3A                     
   600                           ;LCD_20x4.c: 45:  LATD0 = 1;
   601  007E3A  808C               	bsf	3980,0,c	;volatile
   602  007E3C                     
   603                           ;LCD_20x4.c: 46:  RW = 0;
   604  007E3C  94C7               	bcf	4039,2,c	;volatile
   605  007E3E                     
   606                           ;LCD_20x4.c: 47:     LATD1 = 1;
   607  007E3E  828C               	bsf	3980,1,c	;volatile
   608  007E40                     
   609                           ;LCD_20x4.c: 48:  __nop();
   610  007E40  F000               	nop	
   611  007E42                     
   612                           ;LCD_20x4.c: 49:  LATD1 = 0;
   613  007E42  928C               	bcf	3980,1,c	;volatile
   614  007E44                     
   615                           ;LCD_20x4.c: 50:  MSdelay(3);
   616  007E44  0E00               	movlw	0
   617  007E46  6E1A               	movwf	(MSdelay@val+1)^0,c
   618  007E48  0E03               	movlw	3
   619  007E4A  6E19               	movwf	MSdelay@val^0,c
   620  007E4C  EC90  F03F         	call	_MSdelay	;wreg free
   621  007E50  0012               	return		;funcret
   622  007E52                     __end_of_LCD_Char:
   623                           	callstack 0
   624                           
   625 ;; *************** function _LCD_Init *****************
   626 ;; Defined at:
   627 ;;		line 9 in file "LCD_20x4.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;		None
   630 ;; Auto vars:     Size  Location     Type
   631 ;;		None
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg, status,2, status,0, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   641 ;;      Params:         0       0       0       0       0       0       0       0       0
   642 ;;      Locals:         0       0       0       0       0       0       0       0       0
   643 ;;      Temps:          0       0       0       0       0       0       0       0       0
   644 ;;      Totals:         0       0       0       0       0       0       0       0       0
   645 ;;Total ram usage:        0 bytes
   646 ;; Hardware stack levels used:    1
   647 ;; Hardware stack levels required when called:    2
   648 ;; This function calls:
   649 ;;		_LCD_Command
   650 ;;		_MSdelay
   651 ;; This function is called by:
   652 ;;		_main
   653 ;; This function uses a non-reentrant model
   654 ;;
   655                           
   656                           	psect	text5
   657  007E98                     __ptext5:
   658                           	callstack 0
   659  007E98                     _LCD_Init:
   660                           	callstack 28
   661  007E98                     
   662                           ;LCD_20x4.c: 11:     TRISD = 0;
   663  007E98  0E00               	movlw	0
   664  007E9A  6E95               	movwf	149,c	;volatile
   665                           
   666                           ;LCD_20x4.c: 12:  TRISB = 0;
   667  007E9C  0E00               	movlw	0
   668  007E9E  6E93               	movwf	147,c	;volatile
   669  007EA0                     
   670                           ;LCD_20x4.c: 14:  MSdelay(20);
   671  007EA0  0E00               	movlw	0
   672  007EA2  6E1A               	movwf	(MSdelay@val+1)^0,c
   673  007EA4  0E14               	movlw	20
   674  007EA6  6E19               	movwf	MSdelay@val^0,c
   675  007EA8  EC90  F03F         	call	_MSdelay	;wreg free
   676  007EAC                     
   677                           ;LCD_20x4.c: 15:  LCD_Command (0x38);
   678  007EAC  0E38               	movlw	56
   679  007EAE  EC0B  F03F         	call	_LCD_Command
   680  007EB2                     
   681                           ;LCD_20x4.c: 16:  LCD_Command (0x0C);
   682  007EB2  0E0C               	movlw	12
   683  007EB4  EC0B  F03F         	call	_LCD_Command
   684  007EB8                     
   685                           ;LCD_20x4.c: 17:  LCD_Command (0x06);
   686  007EB8  0E06               	movlw	6
   687  007EBA  EC0B  F03F         	call	_LCD_Command
   688  007EBE                     
   689                           ;LCD_20x4.c: 18:  LCD_Command (0x01);
   690  007EBE  0E01               	movlw	1
   691  007EC0  EC0B  F03F         	call	_LCD_Command
   692  007EC4                     
   693                           ;LCD_20x4.c: 19:  MSdelay(3);
   694  007EC4  0E00               	movlw	0
   695  007EC6  6E1A               	movwf	(MSdelay@val+1)^0,c
   696  007EC8  0E03               	movlw	3
   697  007ECA  6E19               	movwf	MSdelay@val^0,c
   698  007ECC  EC90  F03F         	call	_MSdelay	;wreg free
   699  007ED0                     
   700                           ;LCD_20x4.c: 20:  LCD_Command (0x80);
   701  007ED0  0E80               	movlw	128
   702  007ED2  EC0B  F03F         	call	_LCD_Command
   703  007ED6  0012               	return		;funcret
   704  007ED8                     __end_of_LCD_Init:
   705                           	callstack 0
   706                           
   707 ;; *************** function _LCD_Command *****************
   708 ;; Defined at:
   709 ;;		line 31 in file "LCD_20x4.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;  cmd             1    wreg     unsigned char 
   712 ;; Auto vars:     Size  Location     Type
   713 ;;  cmd             1    6[COMRAM] unsigned char 
   714 ;; Return value:  Size  Location     Type
   715 ;;                  1    wreg      void 
   716 ;; Registers used:
   717 ;;		wreg, status,2, status,0, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : 0/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   723 ;;      Params:         0       0       0       0       0       0       0       0       0
   724 ;;      Locals:         1       0       0       0       0       0       0       0       0
   725 ;;      Temps:          0       0       0       0       0       0       0       0       0
   726 ;;      Totals:         1       0       0       0       0       0       0       0       0
   727 ;;Total ram usage:        1 bytes
   728 ;; Hardware stack levels used:    1
   729 ;; Hardware stack levels required when called:    1
   730 ;; This function calls:
   731 ;;		_MSdelay
   732 ;; This function is called by:
   733 ;;		_LCD_Init
   734 ;;		_LCD_Custom_Char
   735 ;;		_SensorLuz
   736 ;;		_LCD_Clear
   737 ;;		_LCD_String_xy
   738 ;; This function uses a non-reentrant model
   739 ;;
   740                           
   741                           	psect	text6
   742  007E16                     __ptext6:
   743                           	callstack 0
   744  007E16                     _LCD_Command:
   745                           	callstack 27
   746                           
   747                           ;incstack = 0
   748                           ;LCD_Command@cmd stored from wreg
   749  007E16  6E1F               	movwf	LCD_Command@cmd^0,c
   750  007E18                     
   751                           ;LCD_20x4.c: 31: void LCD_Command(char cmd );LCD_20x4.c: 32: {;LCD_20x4.c: 33:  LATB = c
      +                          md;
   752  007E18  C01F  FF8A         	movff	LCD_Command@cmd,3978	;volatile
   753  007E1C                     
   754                           ;LCD_20x4.c: 34:  LATD0 = 0;
   755  007E1C  908C               	bcf	3980,0,c	;volatile
   756  007E1E                     
   757                           ;LCD_20x4.c: 35:  RW = 0;
   758  007E1E  94C7               	bcf	4039,2,c	;volatile
   759  007E20                     
   760                           ;LCD_20x4.c: 36:     LATD1 = 1;
   761  007E20  828C               	bsf	3980,1,c	;volatile
   762  007E22                     
   763                           ;LCD_20x4.c: 37:  __nop();
   764  007E22  F000               	nop	
   765  007E24                     
   766                           ;LCD_20x4.c: 38:  LATD1 = 0;
   767  007E24  928C               	bcf	3980,1,c	;volatile
   768  007E26                     
   769                           ;LCD_20x4.c: 39:  MSdelay(3);
   770  007E26  0E00               	movlw	0
   771  007E28  6E1A               	movwf	(MSdelay@val+1)^0,c
   772  007E2A  0E03               	movlw	3
   773  007E2C  6E19               	movwf	MSdelay@val^0,c
   774  007E2E  EC90  F03F         	call	_MSdelay	;wreg free
   775  007E32  0012               	return		;funcret
   776  007E34                     __end_of_LCD_Command:
   777                           	callstack 0
   778                           
   779 ;; *************** function _MSdelay *****************
   780 ;; Defined at:
   781 ;;		line 90 in file "LCD_20x4.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;  val             2    0[COMRAM] unsigned int 
   784 ;; Auto vars:     Size  Location     Type
   785 ;;  j               2    4[COMRAM] unsigned int 
   786 ;;  i               2    2[COMRAM] unsigned int 
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg, status,2, status,0
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   796 ;;      Params:         2       0       0       0       0       0       0       0       0
   797 ;;      Locals:         4       0       0       0       0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0       0       0       0       0
   799 ;;      Totals:         6       0       0       0       0       0       0       0       0
   800 ;;Total ram usage:        6 bytes
   801 ;; Hardware stack levels used:    1
   802 ;; This function calls:
   803 ;;		Nothing
   804 ;; This function is called by:
   805 ;;		_LCD_Init
   806 ;;		_LCD_Command
   807 ;;		_LCD_Char
   808 ;;		_SensorLuz
   809 ;;		_LCD_Clear
   810 ;; This function uses a non-reentrant model
   811 ;;
   812                           
   813                           	psect	text7
   814  007F20                     __ptext7:
   815                           	callstack 0
   816  007F20                     _MSdelay:
   817                           	callstack 29
   818  007F20                     
   819                           ;LCD_20x4.c: 90: void MSdelay(unsigned int val);LCD_20x4.c: 91: {;LCD_20x4.c: 92:      u
      +                          nsigned int i,j;;LCD_20x4.c: 93:         for(i=0;i<=val;i++)
   820  007F20  0E00               	movlw	0
   821  007F22  6E1C               	movwf	(MSdelay@i+1)^0,c
   822  007F24  0E00               	movlw	0
   823  007F26  6E1B               	movwf	MSdelay@i^0,c
   824  007F28  EFA9  F03F         	goto	l982
   825  007F2C                     l970:
   826                           
   827                           ;LCD_20x4.c: 94:             for(j=0;j<165;j++);
   828  007F2C  0E00               	movlw	0
   829  007F2E  6E1E               	movwf	(MSdelay@j+1)^0,c
   830  007F30  0E00               	movlw	0
   831  007F32  6E1D               	movwf	MSdelay@j^0,c
   832  007F34                     l976:
   833  007F34  4A1D               	infsnz	MSdelay@j^0,f,c
   834  007F36  2A1E               	incf	(MSdelay@j+1)^0,f,c
   835  007F38  501E               	movf	(MSdelay@j+1)^0,w,c
   836  007F3A  E109               	bnz	u190
   837  007F3C  0EA5               	movlw	165
   838  007F3E  5C1D               	subwf	MSdelay@j^0,w,c
   839  007F40  A0D8               	btfss	status,0,c
   840  007F42  EFA5  F03F         	goto	u191
   841  007F46  EFA7  F03F         	goto	u190
   842  007F4A                     u191:
   843  007F4A  EF9A  F03F         	goto	l976
   844  007F4E                     u190:
   845  007F4E  4A1B               	infsnz	MSdelay@i^0,f,c
   846  007F50  2A1C               	incf	(MSdelay@i+1)^0,f,c
   847  007F52                     l982:
   848  007F52  501B               	movf	MSdelay@i^0,w,c
   849  007F54  5C19               	subwf	MSdelay@val^0,w,c
   850  007F56  501C               	movf	(MSdelay@i+1)^0,w,c
   851  007F58  581A               	subwfb	(MSdelay@val+1)^0,w,c
   852  007F5A  B0D8               	btfsc	status,0,c
   853  007F5C  EFB2  F03F         	goto	u201
   854  007F60  EFB4  F03F         	goto	u200
   855  007F64                     u201:
   856  007F64  EF96  F03F         	goto	l970
   857  007F68                     u200:
   858  007F68  0012               	return		;funcret
   859  007F6A                     __end_of_MSdelay:
   860                           	callstack 0
   861                           
   862 ;; *************** function _ADC_Init *****************
   863 ;; Defined at:
   864 ;;		line 10 in file "PIC18F4550_ADC_Source_File.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;		None
   867 ;; Auto vars:     Size  Location     Type
   868 ;;		None
   869 ;; Return value:  Size  Location     Type
   870 ;;                  1    wreg      void 
   871 ;; Registers used:
   872 ;;		wreg, status,2
   873 ;; Tracked objects:
   874 ;;		On entry : 0/0
   875 ;;		On exit  : 0/0
   876 ;;		Unchanged: 0/0
   877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   878 ;;      Params:         0       0       0       0       0       0       0       0       0
   879 ;;      Locals:         0       0       0       0       0       0       0       0       0
   880 ;;      Temps:          0       0       0       0       0       0       0       0       0
   881 ;;      Totals:         0       0       0       0       0       0       0       0       0
   882 ;;Total ram usage:        0 bytes
   883 ;; Hardware stack levels used:    1
   884 ;; This function calls:
   885 ;;		Nothing
   886 ;; This function is called by:
   887 ;;		_main
   888 ;; This function uses a non-reentrant model
   889 ;;
   890                           
   891                           	psect	text8
   892  007DE6                     __ptext8:
   893                           	callstack 0
   894  007DE6                     _ADC_Init:
   895                           	callstack 30
   896  007DE6                     
   897                           ;PIC18F4550_ADC_Source_File.c: 12:     TRISA = 0xff;
   898  007DE6  6892               	setf	146,c	;volatile
   899  007DE8                     
   900                           ;PIC18F4550_ADC_Source_File.c: 13:     ADCON0 = 0x85;
   901  007DE8  0E85               	movlw	133
   902  007DEA  6EC2               	movwf	194,c	;volatile
   903                           
   904                           ;PIC18F4550_ADC_Source_File.c: 14:     ADCON1 = 0xD0;
   905  007DEC  0ED0               	movlw	208
   906  007DEE  6EC1               	movwf	193,c	;volatile
   907                           
   908                           ;PIC18F4550_ADC_Source_File.c: 15:     ADCON2 = 0x92;
   909  007DF0  0E92               	movlw	146
   910  007DF2  6EC0               	movwf	192,c	;volatile
   911                           
   912                           ;PIC18F4550_ADC_Source_File.c: 16:     ADRESH=0;
   913  007DF4  0E00               	movlw	0
   914  007DF6  6EC4               	movwf	196,c	;volatile
   915                           
   916                           ;PIC18F4550_ADC_Source_File.c: 17:     ADRESL=0;
   917  007DF8  0E00               	movlw	0
   918  007DFA  6EC3               	movwf	195,c	;volatile
   919  007DFC  0012               	return		;funcret
   920  007DFE                     __end_of_ADC_Init:
   921                           	callstack 0
   922  0000                     
   923                           	psect	rparam
   924  0000                     
   925                           	psect	idloc
   926                           
   927                           ;Config register IDLOC0 @ 0x200000
   928                           ;	unspecified, using default values
   929  200000                     	org	2097152
   930  200000  FF                 	db	255
   931                           
   932                           ;Config register IDLOC1 @ 0x200001
   933                           ;	unspecified, using default values
   934  200001                     	org	2097153
   935  200001  FF                 	db	255
   936                           
   937                           ;Config register IDLOC2 @ 0x200002
   938                           ;	unspecified, using default values
   939  200002                     	org	2097154
   940  200002  FF                 	db	255
   941                           
   942                           ;Config register IDLOC3 @ 0x200003
   943                           ;	unspecified, using default values
   944  200003                     	org	2097155
   945  200003  FF                 	db	255
   946                           
   947                           ;Config register IDLOC4 @ 0x200004
   948                           ;	unspecified, using default values
   949  200004                     	org	2097156
   950  200004  FF                 	db	255
   951                           
   952                           ;Config register IDLOC5 @ 0x200005
   953                           ;	unspecified, using default values
   954  200005                     	org	2097157
   955  200005  FF                 	db	255
   956                           
   957                           ;Config register IDLOC6 @ 0x200006
   958                           ;	unspecified, using default values
   959  200006                     	org	2097158
   960  200006  FF                 	db	255
   961                           
   962                           ;Config register IDLOC7 @ 0x200007
   963                           ;	unspecified, using default values
   964  200007                     	org	2097159
   965  200007  FF                 	db	255
   966                           
   967                           	psect	config
   968                           
   969                           ;Config register CONFIG1L @ 0x300000
   970                           ;	PLL Prescaler Selection bits
   971                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   972                           ;	System Clock Postscaler Selection bits
   973                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   974                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   975                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   976  300000                     	org	3145728
   977  300000  00                 	db	0
   978                           
   979                           ;Config register CONFIG1H @ 0x300001
   980                           ;	Oscillator Selection bits
   981                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
   982                           ;	Fail-Safe Clock Monitor Enable bit
   983                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   984                           ;	Internal/External Oscillator Switchover bit
   985                           ;	IESO = OFF, Oscillator Switchover mode disabled
   986  300001                     	org	3145729
   987  300001  09                 	db	9
   988                           
   989                           ;Config register CONFIG2L @ 0x300002
   990                           ;	Power-up Timer Enable bit
   991                           ;	PWRT = OFF, PWRT disabled
   992                           ;	Brown-out Reset Enable bits
   993                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   994                           ;	Brown-out Reset Voltage bits
   995                           ;	BORV = 3, Minimum setting 2.05V
   996                           ;	USB Voltage Regulator Enable bit
   997                           ;	VREGEN = OFF, USB voltage regulator disabled
   998  300002                     	org	3145730
   999  300002  1F                 	db	31
  1000                           
  1001                           ;Config register CONFIG2H @ 0x300003
  1002                           ;	Watchdog Timer Enable bit
  1003                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1004                           ;	Watchdog Timer Postscale Select bits
  1005                           ;	WDTPS = 32768, 1:32768
  1006  300003                     	org	3145731
  1007  300003  1E                 	db	30
  1008                           
  1009                           ; Padding undefined space
  1010  300004                     	org	3145732
  1011  300004  FF                 	db	255
  1012                           
  1013                           ;Config register CONFIG3H @ 0x300005
  1014                           ;	CCP2 MUX bit
  1015                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1016                           ;	PORTB A/D Enable bit
  1017                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  1018                           ;	Low-Power Timer 1 Oscillator Enable bit
  1019                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1020                           ;	MCLR Pin Enable bit
  1021                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  1022  300005                     	org	3145733
  1023  300005  03                 	db	3
  1024                           
  1025                           ;Config register CONFIG4L @ 0x300006
  1026                           ;	Stack Full/Underflow Reset Enable bit
  1027                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1028                           ;	Single-Supply ICSP Enable bit
  1029                           ;	LVP = OFF, Single-Supply ICSP disabled
  1030                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1031                           ;	ICPRT = OFF, ICPORT disabled
  1032                           ;	Extended Instruction Set Enable bit
  1033                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1034                           ;	Background Debugger Enable bit
  1035                           ;	DEBUG = 0x1, unprogrammed default
  1036  300006                     	org	3145734
  1037  300006  81                 	db	129
  1038                           
  1039                           ; Padding undefined space
  1040  300007                     	org	3145735
  1041  300007  FF                 	db	255
  1042                           
  1043                           ;Config register CONFIG5L @ 0x300008
  1044                           ;	Code Protection bit
  1045                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1046                           ;	Code Protection bit
  1047                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1048                           ;	Code Protection bit
  1049                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1050                           ;	Code Protection bit
  1051                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1052  300008                     	org	3145736
  1053  300008  0F                 	db	15
  1054                           
  1055                           ;Config register CONFIG5H @ 0x300009
  1056                           ;	Boot Block Code Protection bit
  1057                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1058                           ;	Data EEPROM Code Protection bit
  1059                           ;	CPD = OFF, Data EEPROM is not code-protected
  1060  300009                     	org	3145737
  1061  300009  C0                 	db	192
  1062                           
  1063                           ;Config register CONFIG6L @ 0x30000A
  1064                           ;	Write Protection bit
  1065                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1066                           ;	Write Protection bit
  1067                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1068                           ;	Write Protection bit
  1069                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1070                           ;	Write Protection bit
  1071                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1072  30000A                     	org	3145738
  1073  30000A  0F                 	db	15
  1074                           
  1075                           ;Config register CONFIG6H @ 0x30000B
  1076                           ;	Configuration Register Write Protection bit
  1077                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1078                           ;	Boot Block Write Protection bit
  1079                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1080                           ;	Data EEPROM Write Protection bit
  1081                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1082  30000B                     	org	3145739
  1083  30000B  E0                 	db	224
  1084                           
  1085                           ;Config register CONFIG7L @ 0x30000C
  1086                           ;	Table Read Protection bit
  1087                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1088                           ;	Table Read Protection bit
  1089                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1090                           ;	Table Read Protection bit
  1091                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1092                           ;	Table Read Protection bit
  1093                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1094  30000C                     	org	3145740
  1095  30000C  0F                 	db	15
  1096                           
  1097                           ;Config register CONFIG7H @ 0x30000D
  1098                           ;	Boot Block Table Read Protection bit
  1099                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1100  30000D                     	org	3145741
  1101  30000D  40                 	db	64
  1102                           tosu	equ	0xFFF
  1103                           tosh	equ	0xFFE
  1104                           tosl	equ	0xFFD
  1105                           stkptr	equ	0xFFC
  1106                           pclatu	equ	0xFFB
  1107                           pclath	equ	0xFFA
  1108                           pcl	equ	0xFF9
  1109                           tblptru	equ	0xFF8
  1110                           tblptrh	equ	0xFF7
  1111                           tblptrl	equ	0xFF6
  1112                           tablat	equ	0xFF5
  1113                           prodh	equ	0xFF4
  1114                           prodl	equ	0xFF3
  1115                           indf0	equ	0xFEF
  1116                           postinc0	equ	0xFEE
  1117                           postdec0	equ	0xFED
  1118                           preinc0	equ	0xFEC
  1119                           plusw0	equ	0xFEB
  1120                           fsr0h	equ	0xFEA
  1121                           fsr0l	equ	0xFE9
  1122                           wreg	equ	0xFE8
  1123                           indf1	equ	0xFE7
  1124                           postinc1	equ	0xFE6
  1125                           postdec1	equ	0xFE5
  1126                           preinc1	equ	0xFE4
  1127                           plusw1	equ	0xFE3
  1128                           fsr1h	equ	0xFE2
  1129                           fsr1l	equ	0xFE1
  1130                           bsr	equ	0xFE0
  1131                           indf2	equ	0xFDF
  1132                           postinc2	equ	0xFDE
  1133                           postdec2	equ	0xFDD
  1134                           preinc2	equ	0xFDC
  1135                           plusw2	equ	0xFDB
  1136                           fsr2h	equ	0xFDA
  1137                           fsr2l	equ	0xFD9
  1138                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     13      37
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    LCD_Custom_Char@msg	PTR unsigned char  size(2) Largest target is 8
		 -> character3(COMRAM[8]), character2(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _main->_SensorLuz
    _SensorLuz->_LCD_Custom_Char
    _LCD_Custom_Char->_LCD_Char
    _LCD_Custom_Char->_LCD_Command
    _LCD_Char->_MSdelay
    _LCD_Init->_LCD_Command
    _LCD_Command->_MSdelay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0    4620
                           _ADC_Init
                           _LCD_Init
                          _SensorLuz
 ---------------------------------------------------------------------------------
 (1) _SensorLuz                                            2     2      0    3198
                                             11 COMRAM     2     2      0
                        _LCD_Command
                    _LCD_Custom_Char
                            _MSdelay
                                _adc
 ---------------------------------------------------------------------------------
 (2) _adc                                                  4     2      2      23
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Custom_Char                                      4     2      2    1730
                                              7 COMRAM     4     2      2
                           _LCD_Char
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (3) _LCD_Char                                             1     1      0     722
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0    1422
                        _LCD_Command
                            _MSdelay
 ---------------------------------------------------------------------------------
 (3) _LCD_Command                                          1     1      0     722
                                              6 COMRAM     1     1      0
                            _MSdelay
 ---------------------------------------------------------------------------------
 (2) _MSdelay                                              6     4      2     700
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _LCD_Init
     _LCD_Command
       _MSdelay
     _MSdelay
   _SensorLuz
     _LCD_Command
       _MSdelay
     _LCD_Custom_Char
       _LCD_Char
         _MSdelay
       _LCD_Command
         _MSdelay
     _MSdelay
     _adc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      D      25       1       38.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      25      20        0.0%
DATA                 0      0      25       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Dec 10 14:14:26 2020

            ?_LCD_Command 0019                        l21 7DFC                        l54 7E32  
                      l48 7ED6                        l57 7E50                        l87 7F68  
                      l79 7F1E                        _GO 007E11                        _RW 007E3A  
         _LCD_Custom_Char 7ED8                       l141 7E62                       l142 7E70  
                     l128 7DE2                       l139 7E54                       l880 7DE6  
                     l882 7DE8                       l970 7F2C                       l980 7F4E  
                     l982 7F52                       l990 7E20                       l976 7F34  
                     l968 7F20                       l992 7E22                       l984 7E18  
                     l978 7F38                       l994 7E24                       l986 7E1C  
                     l996 7E26                       l988 7E1E                       l998 7E36  
                     u200 7F68                       u201 7F64                       u210 7EEA  
                     u211 7EE6                       u220 7F1E                       u221 7F1A  
                     u230 7E62                       u231 7E5E                       u250 7FBE  
                     u251 7FBA                       u190 7F4E                       u191 7F4A  
                     _adc 7E52                      ?_adc 0019                      l1000 7E3A  
                    l1010 7E44                      l1002 7E3C                      l1004 7E3E  
                    l1012 7EDA                      l1100 7DD2                      l1030 7E98  
                    l1006 7E40                      l1022 7EFA                      l1014 7EEA  
                    l1102 7DD6                      l1040 7EBE                      l1032 7EA0  
                    l1008 7E42                      l1024 7F0C                      l1016 7EF6  
                    l1104 7DDA                      l1042 7EC4                      l1034 7EAC  
                    l1026 7F0E                      l1106 7DDE                      l1044 7ED0  
                    l1036 7EB2                      l1028 7E52                      l1060 7F94  
                    l1038 7EB8                      l1070 7FCC                      l1062 7F96  
                    l1054 7F6A                      l1072 7FD8                      l1064 7F9C  
                    l1056 7F6E                      l1074 7FDE                      l1066 7FA8  
                    l1058 7F92                      l1076 7FEC                      l1068 7FBE  
                    l1078 7FF8                      _ADON 007E10                      _LATB 000F8A  
                    _main 7DD2                      indf2 000FDF                      fsr1l 000FE1  
                    fsr2l 000FD9          __end_of_ADC_Init 7DFE                      prodl 000FF3  
                    start 0000           __end_of_MSdelay 7F6A              ___param_bank 000000  
                   ??_adc 001B          __end_of_LCD_Char 7E52          __end_of_LCD_Init 7ED8  
                   ?_main 0019                     _LATD0 007C60                     _LATD1 007C61  
                   _TRISA 000F92                     _TRISB 000F93                     _TRISD 000F95  
                   tablat 000FF5                     status 000FD8   __end_of_LCD_Custom_Char 7F20  
         __initialization 7E72              __end_of_main 7DE6                    ??_main 0026  
           __activetblptr 000000                    _ADCON0 000FC2                    _ADCON1 000FC1  
                  _ADCON2 000FC0                    _ADRESH 000FC4                    _ADRESL 000FC3  
               ??_MSdelay 001B                    _OSCCON 000FD3      __size_of_LCD_Command 001E  
      __size_of_SensorLuz 0096          LCD_Custom_Char@i 0023              __pdataCOMRAM 0001  
               ?_ADC_Init 0019                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                 ?_LCD_Char 0019                __accesstop 0060  
 __end_of__initialization 7E92                 ?_LCD_Init 0019             ___rparam_used 000001  
        ?_LCD_Custom_Char 0020            __pcstackCOMRAM 0019                ??_ADC_Init 0019  
              ??_LCD_Char 001F                _character1 0001                _character2 0011  
              _character3 0009                ??_LCD_Init 0020         __end_of_SensorLuz 8000  
                 _MSdelay 7F20                   __Hparam 0000                   __Lparam 0000  
                 __pcinit 7E72                   __ramtop 0800                   __ptext0 7DD2  
                 __ptext1 7F6A                   __ptext2 7E52                   __ptext3 7ED8  
                 __ptext4 7E34                   __ptext5 7E98                   __ptext6 7E16  
                 __ptext7 7F20                   __ptext8 7DE6              __size_of_adc 0020  
    end_of_initialization 7E92            LCD_Command@cmd 001F                   postdec1 000FE5  
                 postinc0 000FEE                 _PORTDbits 000F83                 _TRISAbits 000F92  
               _TRISDbits 000F95         __size_of_ADC_Init 0018         __size_of_LCD_Char 001E  
       __size_of_LCD_Init 0040             ??_LCD_Command 001F         LCD_Char@char_data 001F  
           __pidataCOMRAM 7DFE       start_initialization 7E72               __end_of_adc 7E72  
               _SensorLuz 7F6A  __size_of_LCD_Custom_Char 0048                 adc@adcval 001B  
     __end_of_LCD_Command 7E34                  ?_MSdelay 0019                ?_SensorLuz 0019  
                _ADC_Init 7DE6                  MSdelay@i 001B                  MSdelay@j 001D  
                _LCD_Char 7E34                  _LCD_Init 7E98               _LCD_Command 7E16  
              _ADCON0bits 000FC2                _ADCON1bits 000FC1                _ADCON2bits 000FC0  
       ??_LCD_Custom_Char 0022                 copy_data0 7E86              SensorLuz@val 0024  
        __size_of_MSdelay 004A                  __Hrparam 0000                  __Lrparam 0000  
             ??_SensorLuz 0024             __size_of_main 0014                MSdelay@val 0019  
      LCD_Custom_Char@loc 0022        LCD_Custom_Char@msg 0020  
